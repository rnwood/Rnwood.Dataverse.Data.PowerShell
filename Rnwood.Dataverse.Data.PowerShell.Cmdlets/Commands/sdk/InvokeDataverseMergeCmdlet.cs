// <auto-generated>
//     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-08T20:29:30.1608973+00:00.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

using System;
using System.Text;
using System.Management.Automation;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.PowerPlatform.Dataverse.Client;
using Rnwood.Dataverse.Data.PowerShell.Commands;
using Microsoft.Xrm.Sdk.Metadata;
using System.Collections;

namespace Rnwood.Dataverse.Data.PowerShell.Commands.Sdk
{
    /// <summary>
    /// Contains the data thatâ€™s needed to merge the information from two entity records of the same type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("GenerateRequestCmdlets.ps1", "1.0.0")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [Cmdlet("Invoke", "DataverseMerge", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    public class InvokeDataverseMergeCmdlet : OrganizationServiceCmdlet
    {

                private EntityMetadataFactory entityMetadataFactory;
        private DataverseEntityConverter entityConverter;

                protected override void BeginProcessing()
        {
            base.BeginProcessing();
            entityMetadataFactory = new EntityMetadataFactory(Connection);
            entityConverter = new DataverseEntityConverter(Connection, entityMetadataFactory);
        }

                /// <summary>
        /// Gets or sets the target of the merge operation. Required. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name.
        /// </summary>

        [Parameter(Mandatory = true, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true, HelpMessage = "Gets or sets the target of the merge operation. Required. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name.")]
        public PSObject Target { get; set; }

        /// <summary>
        /// Gets or sets the ID of the entity record from which to merge data. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the ID of the entity record from which to merge data. Required.")]
        public System.Guid SubordinateId { get; set; }

        /// <summary>
        /// Gets or sets additional entity attributes to be set during the merge operation for accounts, contacts, or leads. This property is not applied when merging incidents. Optional. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets additional entity attributes to be set during the merge operation for accounts, contacts, or leads. This property is not applied when merging incidents. Optional. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.")]
        public PSObject UpdateContent { get; set; }

        /// <summary>
        /// Gets or sets additional entity attributes to be set during the merge operation for accounts, contacts, or leads. This property is not applied when merging incidents. Optional. The logical name of the table/entity type for the UpdateContent parameter.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets additional entity attributes to be set during the merge operation for accounts, contacts, or leads. This property is not applied when merging incidents. Optional. The logical name of the table/entity type for the UpdateContent parameter.")]
        [ArgumentCompleter(typeof(TableNameArgumentCompleter))]
        public string UpdateContentTableName { get; set; }

        /// <summary>
        /// Gets or sets additional entity attributes to be set during the merge operation for accounts, contacts, or leads. This property is not applied when merging incidents. Optional. Properties to ignore when converting UpdateContent PSObject to Entity.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets additional entity attributes to be set during the merge operation for accounts, contacts, or leads. This property is not applied when merging incidents. Optional. Properties to ignore when converting UpdateContent PSObject to Entity.")]
        [ArgumentCompleter(typeof(Rnwood.Dataverse.Data.PowerShell.Commands.PSObjectPropertyNameArgumentCompleter))]
        public string[] UpdateContentIgnoreProperties { get; set; }

        /// <summary>
        /// Gets or sets additional entity attributes to be set during the merge operation for accounts, contacts, or leads. This property is not applied when merging incidents. Optional. Hashtable specifying lookup columns for entity reference conversions in UpdateContent.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets additional entity attributes to be set during the merge operation for accounts, contacts, or leads. This property is not applied when merging incidents. Optional. Hashtable specifying lookup columns for entity reference conversions in UpdateContent.")]
        public Hashtable UpdateContentLookupColumns { get; set; }

        /// <summary>
        /// Gets or sets a value that indicates whether to check if the parent information is different for the two entity records. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets a value that indicates whether to check if the parent information is different for the two entity records. Required.")]
        public System.Boolean PerformParentingChecks { get; set; }

                /// <summary>
        /// Processes the cmdlet request and writes the response to the pipeline.
        /// </summary>
        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            var request = new Microsoft.Crm.Sdk.Messages.MergeRequest();
                        request.Target = DataverseEntityConverter.ConvertPSObjectToEntityReference(Target);
            request.SubordinateId = SubordinateId;
            { var options = new ConvertToDataverseEntityOptions(); if (UpdateContentIgnoreProperties != null) { foreach (string prop in UpdateContentIgnoreProperties) { options.IgnoredPropertyName.Add(prop); } } if (UpdateContentLookupColumns != null) { foreach (DictionaryEntry entry in UpdateContentLookupColumns) { options.ColumnOptions[(string)entry.Key] = new ConvertToDataverseEntityColumnOptions() { LookupColumn = (string)entry.Value }; } } request.UpdateContent = entityConverter.ConvertToDataverseEntity(UpdateContent, UpdateContentTableName, options); }
            request.PerformParentingChecks = PerformParentingChecks;

            // Build a short serialized summary of the request for ShouldProcess output
            var requestSummary = new StringBuilder();
            try
            {
                var props = request.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                foreach (var p in props)
                {
                    object val = null;
                    try { val = p.GetValue(request); } catch { val = null; }
                    var vstr = val == null ? "null" : val.ToString();
                    requestSummary.Append(p.Name).Append("=").Append(vstr).Append("; ");
                }
            }
            catch
            {
                // Ignore any errors while serializing the request for what-if messaging
            }

            // Emit verbose output of the serialized request when -Verbose is used
            try { WriteVerbose(requestSummary.ToString()); } catch { }

            // Support -WhatIf and -Confirm; include request summary in the action description
            if (!ShouldProcess(request.GetType().Name, requestSummary.ToString()))
            {
                return;
            }

            var response = Connection.Execute(request);
            WriteObject(response);
        }
    }
}

#pragma warning restore CS1591
