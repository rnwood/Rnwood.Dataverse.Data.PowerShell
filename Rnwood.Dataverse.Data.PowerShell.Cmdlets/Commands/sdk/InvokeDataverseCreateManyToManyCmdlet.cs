// <auto-generated>
//     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-04T14:50:39.3617848+01:00.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

using System;
using System.Text;
using System.Management.Automation;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.PowerPlatform.Dataverse.Client;
using Rnwood.Dataverse.Data.PowerShell.Commands;

namespace Rnwood.Dataverse.Data.PowerShell.Commands.Sdk
{
    /// <summary>
    /// Contains the data that is needed to create a new Many-to-Many (N:N) table relationship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("GenerateRequestCmdlets.ps1", "1.0.0")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [Cmdlet("Invoke", "DataverseCreateManyToMany", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    public class InvokeDataverseCreateManyToManyCmdlet : OrganizationServiceCmdlet
    {
                /// <summary>
        /// DataverseConnection instance obtained from Get-DataverseConnection cmdlet
        /// </summary>
        [Parameter(Mandatory = true, HelpMessage = "DataverseConnection instance obtained from Get-DataverseConnection cmdlet")]
        public override ServiceClient Connection { get; set; }

        

        

                /// <summary>
        /// Gets or sets the name of the intersect entity to be created for this entity relationship. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the name of the intersect entity to be created for this entity relationship. Required.")]
        public System.String IntersectEntitySchemaName { get; set; }

        /// <summary>
        /// Gets or sets the definition of the Many-to-Many table relationship to be created. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the definition of the Many-to-Many table relationship to be created. Required.")]
        public Microsoft.Xrm.Sdk.Metadata.ManyToManyRelationshipMetadata ManyToManyRelationship { get; set; }

        /// <summary>
        /// Gets or sets the name of the unmanaged solution to which you want to add this column. Optional.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the name of the unmanaged solution to which you want to add this column. Optional.")]
        public System.String SolutionUniqueName { get; set; }

                /// <summary>
        /// Processes the cmdlet request and writes the response to the pipeline.
        /// </summary>
        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            var request = new Microsoft.Xrm.Sdk.Messages.CreateManyToManyRequest();
                        request.IntersectEntitySchemaName = IntersectEntitySchemaName;
            request.ManyToManyRelationship = ManyToManyRelationship;
            request.SolutionUniqueName = SolutionUniqueName;

            // Build a short serialized summary of the request for ShouldProcess output
            var requestSummary = new StringBuilder();
            try
            {
                var props = request.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                foreach (var p in props)
                {
                    object val = null;
                    try { val = p.GetValue(request); } catch { val = null; }
                    var vstr = val == null ? "null" : val.ToString();
                    requestSummary.Append(p.Name).Append("=").Append(vstr).Append("; ");
                }
            }
            catch
            {
                // Ignore any errors while serializing the request for what-if messaging
            }

            // Emit verbose output of the serialized request when -Verbose is used
            try { WriteVerbose(requestSummary.ToString()); } catch { }

            // Support -WhatIf and -Confirm; include request summary in the action description
            if (!ShouldProcess(request.GetType().Name, requestSummary.ToString()))
            {
                return;
            }

            var response = Connection.Execute(request);
            WriteObject(response);
        }
    }
}

#pragma warning restore CS1591
