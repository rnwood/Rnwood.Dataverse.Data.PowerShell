// <auto-generated>
//     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-06T19:50:04.3146594+00:00.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

using System;
using System.Text;
using System.Management.Automation;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.PowerPlatform.Dataverse.Client;
using Rnwood.Dataverse.Data.PowerShell.Commands;
using System.IO;

namespace Rnwood.Dataverse.Data.PowerShell.Commands.Sdk
{
    /// <summary>
    /// Executes a ImportTranslationAsyncRequest against the Dataverse organization service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("GenerateRequestCmdlets.ps1", "1.0.0")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [Cmdlet("Invoke", "DataverseImportTranslationAsync", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium, DefaultParameterSetName = "Default")]
    public class InvokeDataverseImportTranslationAsyncCmdlet : OrganizationServiceCmdlet
    {

        

        

                /// <summary>
        /// Gets or sets the compressed translations file. Required.
        /// </summary>

        [Parameter(ParameterSetName = "Default", HelpMessage = "Gets or sets the compressed translations file. Required.")]
        public System.Byte[] TranslationFile { get; set; }



        /// <summary>

        /// Gets or sets the path to a file containing the data to upload.

        /// </summary>

        [Parameter(ParameterSetName = "FromFile", Mandatory = true, HelpMessage = "Gets or sets the path to a file containing the data to upload.")]

        [ValidateNotNullOrEmpty]

        public System.String InFile { get; set; }

        /// <summary>
        /// The ID of the Import Job.
        /// </summary>

        [Parameter(HelpMessage = "The ID of the Import Job.")]
        public System.Guid ImportJobId { get; set; }

                /// <summary>
        /// Processes the cmdlet request and writes the response to the pipeline.
        /// </summary>
        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            var request = new Microsoft.Crm.Sdk.Messages.ImportTranslationAsyncRequest();
                        // Load file if InFile parameter is specified
            byte[] translationFileData = TranslationFile;
            if (!string.IsNullOrEmpty(InFile))
            {
                if (!File.Exists(InFile))
                {
                    throw new FileNotFoundException($"The specified file does not exist: {InFile}");
                }
                translationFileData = File.ReadAllBytes(InFile);
            }
            request.TranslationFile = translationFileData;
            request.ImportJobId = ImportJobId;

            // Build a short serialized summary of the request for ShouldProcess output
            var requestSummary = new StringBuilder();
            try
            {
                var props = request.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                foreach (var p in props)
                {
                    object val = null;
                    try { val = p.GetValue(request); } catch { val = null; }
                    var vstr = val == null ? "null" : val.ToString();
                    requestSummary.Append(p.Name).Append("=").Append(vstr).Append("; ");
                }
            }
            catch
            {
                // Ignore any errors while serializing the request for what-if messaging
            }

            // Emit verbose output of the serialized request when -Verbose is used
            try { WriteVerbose(requestSummary.ToString()); } catch { }

            // Support -WhatIf and -Confirm; include request summary in the action description
            if (!ShouldProcess(request.GetType().Name, requestSummary.ToString()))
            {
                return;
            }

            var response = Connection.Execute(request);
            WriteObject(response);
        }
    }
}

#pragma warning restore CS1591
