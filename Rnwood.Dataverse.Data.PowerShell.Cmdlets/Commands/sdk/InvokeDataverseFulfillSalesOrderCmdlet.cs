// <auto-generated>
//     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-08T21:02:51.3199277+00:00.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

using System;
using System.Text;
using System.Management.Automation;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.PowerPlatform.Dataverse.Client;
using Rnwood.Dataverse.Data.PowerShell.Commands;
using Microsoft.Xrm.Sdk.Metadata;
using System.Collections;

namespace Rnwood.Dataverse.Data.PowerShell.Commands.Sdk
{
    /// <summary>
    /// Contains the data that is needed to fulfill the sales order (order).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("GenerateRequestCmdlets.ps1", "1.0.0")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [Cmdlet("Invoke", "DataverseFulfillSalesOrder", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    public class InvokeDataverseFulfillSalesOrderCmdlet : OrganizationServiceCmdlet
    {

                private EntityMetadataFactory entityMetadataFactory;
        private DataverseEntityConverter entityConverter;

                protected override void BeginProcessing()
        {
            base.BeginProcessing();
            entityMetadataFactory = new EntityMetadataFactory(Connection);
            entityConverter = new DataverseEntityConverter(Connection, entityMetadataFactory);
        }

                /// <summary>
        /// Gets or sets the order close activity associated with the sales order (order) to be fulfilled. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the order close activity associated with the sales order (order) to be fulfilled. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.")]
        public PSObject OrderClose { get; set; }

        /// <summary>
        /// Gets or sets the order close activity associated with the sales order (order) to be fulfilled. Required. The logical name of the table/entity type for the OrderClose parameter.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the order close activity associated with the sales order (order) to be fulfilled. Required. The logical name of the table/entity type for the OrderClose parameter.")]
        [ArgumentCompleter(typeof(TableNameArgumentCompleter))]
        public string OrderCloseTableName { get; set; }

        /// <summary>
        /// Gets or sets the order close activity associated with the sales order (order) to be fulfilled. Required. Properties to ignore when converting OrderClose PSObject to Entity.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the order close activity associated with the sales order (order) to be fulfilled. Required. Properties to ignore when converting OrderClose PSObject to Entity.")]
        [ArgumentCompleter(typeof(Rnwood.Dataverse.Data.PowerShell.Commands.PSObjectPropertyNameArgumentCompleter))]
        public string[] OrderCloseIgnoreProperties { get; set; }

        /// <summary>
        /// Gets or sets the order close activity associated with the sales order (order) to be fulfilled. Required. Hashtable specifying lookup columns for entity reference conversions in OrderClose.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the order close activity associated with the sales order (order) to be fulfilled. Required. Hashtable specifying lookup columns for entity reference conversions in OrderClose.")]
        public Hashtable OrderCloseLookupColumns { get; set; }

        /// <summary>
        /// Gets or sets a status of the sales order (order). Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets a status of the sales order (order). Required.")]
        public Microsoft.Xrm.Sdk.OptionSetValue Status { get; set; }

                /// <summary>
        /// Processes the cmdlet request and writes the response to the pipeline.
        /// </summary>
        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            var request = new Microsoft.Crm.Sdk.Messages.FulfillSalesOrderRequest();
                        { var options = new ConvertToDataverseEntityOptions(); if (OrderCloseIgnoreProperties != null) { foreach (string prop in OrderCloseIgnoreProperties) { options.IgnoredPropertyName.Add(prop); } } if (OrderCloseLookupColumns != null) { foreach (DictionaryEntry entry in OrderCloseLookupColumns) { options.ColumnOptions[(string)entry.Key] = new ConvertToDataverseEntityColumnOptions() { LookupColumn = (string)entry.Value }; } } request.OrderClose = entityConverter.ConvertToDataverseEntity(OrderClose, OrderCloseTableName, options); }
            request.Status = Status;

            // Build a short serialized summary of the request for ShouldProcess output
            var requestSummary = new StringBuilder();
            try
            {
                var props = request.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                foreach (var p in props)
                {
                    object val = null;
                    try { val = p.GetValue(request); } catch { val = null; }
                    var vstr = val == null ? "null" : val.ToString();
                    requestSummary.Append(p.Name).Append("=").Append(vstr).Append("; ");
                }
            }
            catch
            {
                // Ignore any errors while serializing the request for what-if messaging
            }

            // Emit verbose output of the serialized request when -Verbose is used
            try { WriteVerbose(requestSummary.ToString()); } catch { }

            // Support -WhatIf and -Confirm; include request summary in the action description
            if (!ShouldProcess(request.GetType().Name, requestSummary.ToString()))
            {
                return;
            }

            var response = Connection.Execute(request);
            WriteObject(response);
        }
    }
}

#pragma warning restore CS1591
