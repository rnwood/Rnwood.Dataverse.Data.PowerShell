// <auto-generated>
//     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-08T21:01:42.1093292+00:00.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

using System;
using System.Text;
using System.Management.Automation;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.PowerPlatform.Dataverse.Client;
using Rnwood.Dataverse.Data.PowerShell.Commands;
using Microsoft.Xrm.Sdk.Metadata;
using System.Collections;

namespace Rnwood.Dataverse.Data.PowerShell.Commands.Sdk
{
    /// <summary>
    /// Contains the data that is needed to create an email activity record from the specified email message (Track in CRM).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("GenerateRequestCmdlets.ps1", "1.0.0")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [Cmdlet("Invoke", "DataverseDeliverPromoteEmail", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    public class InvokeDataverseDeliverPromoteEmailCmdlet : OrganizationServiceCmdlet
    {

                private EntityMetadataFactory entityMetadataFactory;
        private DataverseEntityConverter entityConverter;

                protected override void BeginProcessing()
        {
            base.BeginProcessing();
            entityMetadataFactory = new EntityMetadataFactory(Connection);
            entityConverter = new DataverseEntityConverter(Connection, entityMetadataFactory);
        }

                /// <summary>
        /// Gets or sets the ID of the email from which to create the email. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the ID of the email from which to create the email. Required.")]
        public System.Guid EmailId { get; set; }

        /// <summary>
        /// Gets or sets the ID of the email message stored in the email header. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the ID of the email message stored in the email header. Required.")]
        public System.String MessageId { get; set; }

        /// <summary>
        /// Gets or sets the subject line for the email message. Optional.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the subject line for the email message. Optional.")]
        public System.String Subject { get; set; }

        /// <summary>
        /// Gets or sets the from address for the email message. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the from address for the email message. Required.")]
        public System.String From { get; set; }

        /// <summary>
        /// Gets or sets the addresses of the recipients of the email message. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the addresses of the recipients of the email message. Required.")]
        public System.String To { get; set; }

        /// <summary>
        /// Gets or sets the addresses of the carbon copy (Cc) recipients for the email message. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the addresses of the carbon copy (Cc) recipients for the email message. Required.")]
        public System.String Cc { get; set; }

        /// <summary>
        /// Gets or sets the addresses of the blind carbon copy (Bcc) recipients for the email message. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the addresses of the blind carbon copy (Bcc) recipients for the email message. Required.")]
        public System.String Bcc { get; set; }

        /// <summary>
        /// Gets or sets the time the message was received on. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the time the message was received on. Required.")]
        public System.DateTime ReceivedOn { get; set; }

        /// <summary>
        /// Gets or sets the email address of the account that is creating the email activity instance. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the email address of the account that is creating the email activity instance. Required.")]
        public System.String SubmittedBy { get; set; }

        /// <summary>
        /// Gets or sets the level of importance for the email message. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the level of importance for the email message. Required.")]
        public System.String Importance { get; set; }

        /// <summary>
        /// Gets or sets the message body for the email. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the message body for the email. Required.")]
        public System.String Body { get; set; }

        /// <summary>
        /// Gets or sets a collection of activity mime attachment (email attachment) records to attach to the email message. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets a collection of activity mime attachment (email attachment) records to attach to the email message. Required.")]
        public Microsoft.Xrm.Sdk.EntityCollection Attachments { get; set; }

        /// <summary>
        /// Gets or sets the extra properties for the email. Optional. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the extra properties for the email. Optional. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.")]
        public PSObject ExtraProperties { get; set; }

        /// <summary>
        /// Gets or sets the extra properties for the email. Optional. The logical name of the table/entity type for the ExtraProperties parameter.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the extra properties for the email. Optional. The logical name of the table/entity type for the ExtraProperties parameter.")]
        [ArgumentCompleter(typeof(TableNameArgumentCompleter))]
        public string ExtraPropertiesTableName { get; set; }

        /// <summary>
        /// Gets or sets the extra properties for the email. Optional. Properties to ignore when converting ExtraProperties PSObject to Entity.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the extra properties for the email. Optional. Properties to ignore when converting ExtraProperties PSObject to Entity.")]
        [ArgumentCompleter(typeof(Rnwood.Dataverse.Data.PowerShell.Commands.PSObjectPropertyNameArgumentCompleter))]
        public string[] ExtraPropertiesIgnoreProperties { get; set; }

        /// <summary>
        /// Gets or sets the extra properties for the email. Optional. Hashtable specifying lookup columns for entity reference conversions in ExtraProperties.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the extra properties for the email. Optional. Hashtable specifying lookup columns for entity reference conversions in ExtraProperties.")]
        public Hashtable ExtraPropertiesLookupColumns { get; set; }

                /// <summary>
        /// Processes the cmdlet request and writes the response to the pipeline.
        /// </summary>
        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            var request = new Microsoft.Crm.Sdk.Messages.DeliverPromoteEmailRequest();
                        request.EmailId = EmailId;
            request.MessageId = MessageId;
            request.Subject = Subject;
            request.From = From;
            request.To = To;
            request.Cc = Cc;
            request.Bcc = Bcc;
            request.ReceivedOn = ReceivedOn;
            request.SubmittedBy = SubmittedBy;
            request.Importance = Importance;
            request.Body = Body;
            request.Attachments = Attachments;
            { var options = new ConvertToDataverseEntityOptions(); if (ExtraPropertiesIgnoreProperties != null) { foreach (string prop in ExtraPropertiesIgnoreProperties) { options.IgnoredPropertyName.Add(prop); } } if (ExtraPropertiesLookupColumns != null) { foreach (DictionaryEntry entry in ExtraPropertiesLookupColumns) { options.ColumnOptions[(string)entry.Key] = new ConvertToDataverseEntityColumnOptions() { LookupColumn = (string)entry.Value }; } } request.ExtraProperties = entityConverter.ConvertToDataverseEntity(ExtraProperties, ExtraPropertiesTableName, options); }

            // Build a short serialized summary of the request for ShouldProcess output
            var requestSummary = new StringBuilder();
            try
            {
                var props = request.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                foreach (var p in props)
                {
                    object val = null;
                    try { val = p.GetValue(request); } catch { val = null; }
                    var vstr = val == null ? "null" : val.ToString();
                    requestSummary.Append(p.Name).Append("=").Append(vstr).Append("; ");
                }
            }
            catch
            {
                // Ignore any errors while serializing the request for what-if messaging
            }

            // Emit verbose output of the serialized request when -Verbose is used
            try { WriteVerbose(requestSummary.ToString()); } catch { }

            // Support -WhatIf and -Confirm; include request summary in the action description
            if (!ShouldProcess(request.GetType().Name, requestSummary.ToString()))
            {
                return;
            }

            var response = Connection.Execute(request);
            WriteObject(response);
        }
    }
}

#pragma warning restore CS1591
