// <auto-generated>
//     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-30T07:25:12.7248458+00:00.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

using System;
using System.Text;
using System.Management.Automation;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.PowerPlatform.Dataverse.Client;
using Rnwood.Dataverse.Data.PowerShell.Commands;
using Microsoft.Xrm.Sdk.Metadata;
using System.Collections;

namespace Rnwood.Dataverse.Data.PowerShell.Commands.Sdk
{
    /// <summary>
    /// Contains the data that is needed to move an entity record from a source queue to a destination queue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("GenerateRequestCmdlets.ps1", "1.0.0")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [Cmdlet("Invoke", "DataverseAddToQueue", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    public class InvokeDataverseAddToQueueCmdlet : OrganizationServiceCmdlet
    {

                private EntityMetadataFactory entityMetadataFactory;
        private DataverseEntityConverter entityConverter;

                protected override void BeginProcessing()
        {
            base.BeginProcessing();
            entityMetadataFactory = new EntityMetadataFactory(Connection);
            entityConverter = new DataverseEntityConverter(Connection, entityMetadataFactory);
        }

                /// <summary>
        /// Gets or sets the target, which is a recurring appointment master record to which the appointment is converted. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name.
        /// </summary>

        [Parameter(Mandatory = true, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true, HelpMessage = "Gets or sets the target, which is a recurring appointment master record to which the appointment is converted. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name.")]
        public PSObject Target { get; set; }

        /// <summary>
        /// Gets or sets the ID of the source queue. Optional.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the ID of the source queue. Optional.")]
        public System.Guid SourceQueueId { get; set; }

        /// <summary>
        /// Gets or sets the ID of the destination queue. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the ID of the destination queue. Required.")]
        public System.Guid DestinationQueueId { get; set; }

        /// <summary>
        /// Gets or sets the properties that are needed to create a queue item in the destination queue. Optional. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the properties that are needed to create a queue item in the destination queue. Optional. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.")]
        public PSObject QueueItemProperties { get; set; }

        /// <summary>
        /// Gets or sets the properties that are needed to create a queue item in the destination queue. Optional. The logical name of the table/entity type for the QueueItemProperties parameter.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the properties that are needed to create a queue item in the destination queue. Optional. The logical name of the table/entity type for the QueueItemProperties parameter.")]
        [ArgumentCompleter(typeof(TableNameArgumentCompleter))]
        public string QueueItemPropertiesTableName { get; set; }

        /// <summary>
        /// Gets or sets the properties that are needed to create a queue item in the destination queue. Optional. Properties to ignore when converting QueueItemProperties PSObject to Entity.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the properties that are needed to create a queue item in the destination queue. Optional. Properties to ignore when converting QueueItemProperties PSObject to Entity.")]
        [ArgumentCompleter(typeof(Rnwood.Dataverse.Data.PowerShell.Commands.PSObjectPropertyNameArgumentCompleter))]
        public string[] QueueItemPropertiesIgnoreProperties { get; set; }

        /// <summary>
        /// Gets or sets the properties that are needed to create a queue item in the destination queue. Optional. Hashtable specifying lookup columns for entity reference conversions in QueueItemProperties.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the properties that are needed to create a queue item in the destination queue. Optional. Hashtable specifying lookup columns for entity reference conversions in QueueItemProperties.")]
        public Hashtable QueueItemPropertiesLookupColumns { get; set; }

                /// <summary>
        /// Processes the cmdlet request and writes the response to the pipeline.
        /// </summary>
        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            var request = new Microsoft.Crm.Sdk.Messages.AddToQueueRequest();
                        request.Target = DataverseEntityConverter.ConvertPSObjectToEntityReference(Target);
            request.SourceQueueId = SourceQueueId;
            request.DestinationQueueId = DestinationQueueId;
            { var options = new ConvertToDataverseEntityOptions(); if (QueueItemPropertiesIgnoreProperties != null) { foreach (string prop in QueueItemPropertiesIgnoreProperties) { options.IgnoredPropertyName.Add(prop); } } if (QueueItemPropertiesLookupColumns != null) { foreach (DictionaryEntry entry in QueueItemPropertiesLookupColumns) { options.ColumnOptions[(string)entry.Key] = new ConvertToDataverseEntityColumnOptions() { LookupColumn = (string)entry.Value }; } } request.QueueItemProperties = entityConverter.ConvertToDataverseEntity(QueueItemProperties, QueueItemPropertiesTableName, options); }

            // Build a short serialized summary of the request for ShouldProcess output
            var requestSummary = new StringBuilder();
            try
            {
                var props = request.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                foreach (var p in props)
                {
                    object val = null;
                    try { val = p.GetValue(request); } catch { val = null; }
                    var vstr = val == null ? "null" : val.ToString();
                    requestSummary.Append(p.Name).Append("=").Append(vstr).Append("; ");
                }
            }
            catch
            {
                // Ignore any errors while serializing the request for what-if messaging
            }

            // Emit verbose output of the serialized request when -Verbose is used
            try { WriteVerbose(requestSummary.ToString()); } catch { }

            // Support -WhatIf and -Confirm; include request summary in the action description
            if (!ShouldProcess(request.GetType().Name, requestSummary.ToString()))
            {
                return;
            }

            var response = Connection.Execute(request);
            WriteObject(response);
        }
    }
}

#pragma warning restore CS1591
