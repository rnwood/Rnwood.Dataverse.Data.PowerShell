// <auto-generated>
//     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-04T14:49:27.4850613+01:00.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

using System;
using System.Text;
using System.Management.Automation;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.PowerPlatform.Dataverse.Client;
using Rnwood.Dataverse.Data.PowerShell.Commands;
using Microsoft.Xrm.Sdk.Metadata;
using System.Collections;

namespace Rnwood.Dataverse.Data.PowerShell.Commands.Sdk
{
    /// <summary>
    /// Contains the data to return an existing social profile record if one exists, otherwise generates a new one and returns it.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("GenerateRequestCmdlets.ps1", "1.0.0")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [Cmdlet("Invoke", "DataverseGenerateSocialProfile", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    public class InvokeDataverseGenerateSocialProfileCmdlet : OrganizationServiceCmdlet
    {
                /// <summary>
        /// DataverseConnection instance obtained from Get-DataverseConnection cmdlet
        /// </summary>
        [Parameter(Mandatory = true, HelpMessage = "DataverseConnection instance obtained from Get-DataverseConnection cmdlet")]
        public override ServiceClient Connection { get; set; }

                private EntityMetadataFactory entityMetadataFactory;
        private DataverseEntityConverter entityConverter;

                protected override void BeginProcessing()
        {
            base.BeginProcessing();
            entityMetadataFactory = new EntityMetadataFactory(Connection);
            entityConverter = new DataverseEntityConverter(Connection, entityMetadataFactory);
        }

                /// <summary>
        /// Gets or sets the duplicate rule that you want updated. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the duplicate rule that you want updated. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.")]
        public PSObject Entity { get; set; }

        /// <summary>
        /// Gets or sets the duplicate rule that you want updated. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. The logical name of the table/entity type for the Entity parameter.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the duplicate rule that you want updated. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. The logical name of the table/entity type for the Entity parameter.")]
        [ArgumentCompleter(typeof(TableNameArgumentCompleter))]
        public string EntityTableName { get; set; }

        /// <summary>
        /// Gets or sets the duplicate rule that you want updated. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Properties to ignore when converting Entity PSObject to Entity.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the duplicate rule that you want updated. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Properties to ignore when converting Entity PSObject to Entity.")]
        [ArgumentCompleter(typeof(Rnwood.Dataverse.Data.PowerShell.Commands.PSObjectPropertyNameArgumentCompleter))]
        public string[] EntityIgnoreProperties { get; set; }

        /// <summary>
        /// Gets or sets the duplicate rule that you want updated. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Hashtable specifying lookup columns for entity reference conversions in Entity.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the duplicate rule that you want updated. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Hashtable specifying lookup columns for entity reference conversions in Entity.")]
        public Hashtable EntityLookupColumns { get; set; }

                /// <summary>
        /// Processes the cmdlet request and writes the response to the pipeline.
        /// </summary>
        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            var request = new Microsoft.Crm.Sdk.Messages.GenerateSocialProfileRequest();
                        { var options = new ConvertToDataverseEntityOptions(); if (EntityIgnoreProperties != null) { foreach (string prop in EntityIgnoreProperties) { options.IgnoredPropertyName.Add(prop); } } if (EntityLookupColumns != null) { foreach (DictionaryEntry entry in EntityLookupColumns) { options.ColumnOptions[(string)entry.Key] = new ConvertToDataverseEntityColumnOptions() { LookupColumn = (string)entry.Value }; } } request.Entity = entityConverter.ConvertToDataverseEntity(Entity, EntityTableName, options); }

            // Build a short serialized summary of the request for ShouldProcess output
            var requestSummary = new StringBuilder();
            try
            {
                var props = request.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                foreach (var p in props)
                {
                    object val = null;
                    try { val = p.GetValue(request); } catch { val = null; }
                    var vstr = val == null ? "null" : val.ToString();
                    requestSummary.Append(p.Name).Append("=").Append(vstr).Append("; ");
                }
            }
            catch
            {
                // Ignore any errors while serializing the request for what-if messaging
            }

            // Emit verbose output of the serialized request when -Verbose is used
            try { WriteVerbose(requestSummary.ToString()); } catch { }

            // Support -WhatIf and -Confirm; include request summary in the action description
            if (!ShouldProcess(request.GetType().Name, requestSummary.ToString()))
            {
                return;
            }

            var response = Connection.Execute(request);
            WriteObject(response);
        }
    }
}

#pragma warning restore CS1591
