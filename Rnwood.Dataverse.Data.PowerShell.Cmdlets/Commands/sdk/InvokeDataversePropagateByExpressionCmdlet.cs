// <auto-generated>
//     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-06T19:32:26.0714005+00:00.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

using System;
using System.Text;
using System.Management.Automation;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.PowerPlatform.Dataverse.Client;
using Rnwood.Dataverse.Data.PowerShell.Commands;
using Microsoft.Xrm.Sdk.Metadata;
using System.Collections;

namespace Rnwood.Dataverse.Data.PowerShell.Commands.Sdk
{
    /// <summary>
    /// Contains the data that is needed to create a quick campaign to distribute an activity to accounts, contacts, or leads that are selected by a query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("GenerateRequestCmdlets.ps1", "1.0.0")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [Cmdlet("Invoke", "Dataverse$cmdletName", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    public class InvokeDataversePropagateByExpressionCmdlet : OrganizationServiceCmdlet
    {

                private EntityMetadataFactory entityMetadataFactory;
        private DataverseEntityConverter entityConverter;

                protected override void BeginProcessing()
        {
            base.BeginProcessing();
            entityMetadataFactory = new EntityMetadataFactory(Connection);
            entityConverter = new DataverseEntityConverter(Connection, entityMetadataFactory);
        }

                /// <summary>
        /// Gets or sets the query criteria to find knowledge articles with specified text. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the query criteria to find knowledge articles with specified text. Required.")]
        public Microsoft.Xrm.Sdk.Query.QueryBase QueryExpression { get; set; }

        /// <summary>
        /// Gets or sets the friendly name of the organization.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the friendly name of the organization.")]
        public System.String FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets a value that indicates whether the activity is both created and executed. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets a value that indicates whether the activity is both created and executed. Required.")]
        public System.Boolean ExecuteImmediately { get; set; }

        /// <summary>
        /// Gets or sets the activity to be distributed. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the activity to be distributed. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.")]
        public PSObject Activity { get; set; }

        /// <summary>
        /// Gets or sets the activity to be distributed. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. The logical name of the table/entity type for the Activity parameter.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the activity to be distributed. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. The logical name of the table/entity type for the Activity parameter.")]
        [ArgumentCompleter(typeof(TableNameArgumentCompleter))]
        public string ActivityTableName { get; set; }

        /// <summary>
        /// Gets or sets the activity to be distributed. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Properties to ignore when converting Activity PSObject to Entity.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the activity to be distributed. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Properties to ignore when converting Activity PSObject to Entity.")]
        [ArgumentCompleter(typeof(Rnwood.Dataverse.Data.PowerShell.Commands.PSObjectPropertyNameArgumentCompleter))]
        public string[] ActivityIgnoreProperties { get; set; }

        /// <summary>
        /// Gets or sets the activity to be distributed. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Hashtable specifying lookup columns for entity reference conversions in Activity.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the activity to be distributed. Required. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Hashtable specifying lookup columns for entity reference conversions in Activity.")]
        public Hashtable ActivityLookupColumns { get; set; }

        /// <summary>
        /// Sets the ID of the template (email template) that is used for the email notification.
        /// </summary>

        [Parameter(HelpMessage = "Sets the ID of the template (email template) that is used for the email notification.")]
        public System.Guid TemplateId { get; set; }

        /// <summary>
        /// Gets or sets the propagation ownership options. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the propagation ownership options. Required.")]
        public Microsoft.Crm.Sdk.Messages.PropagationOwnershipOptions OwnershipOptions { get; set; }

        /// <summary>
        /// Gets or sets a value that indicates whether an asynchronous job is used to distribute an activity, such as an email, fax, or letter, to the members of a list. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets a value that indicates whether an asynchronous job is used to distribute an activity, such as an email, fax, or letter, to the members of a list. Required.")]
        public System.Boolean PostWorkflowEvent { get; set; }

        /// <summary>
        /// Gets or sets the owner for the activity. Required. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the owner for the activity. Required. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name. Accepts PSObject with Id and TableName/EntityName/LogicalName properties, or a string containing the entity name for lookup by name.")]
        public PSObject Owner { get; set; }

        /// <summary>
        /// Gets or sets a value that indicates whether to send an email about the new activity. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets a value that indicates whether to send an email about the new activity. Required.")]
        public System.Boolean SendEmail { get; set; }

        /// <summary>
        /// Gets or sets the ID of the queue. Required
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the ID of the queue. Required")]
        public System.Guid QueueId { get; set; }

                /// <summary>
        /// Processes the cmdlet request and writes the response to the pipeline.
        /// </summary>
        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            var request = new Microsoft.Crm.Sdk.Messages.PropagateByExpressionRequest();
                        request.QueryExpression = QueryExpression;
            request.FriendlyName = FriendlyName;
            request.ExecuteImmediately = ExecuteImmediately;
            { var options = new ConvertToDataverseEntityOptions(); if (ActivityIgnoreProperties != null) { foreach (string prop in ActivityIgnoreProperties) { options.IgnoredPropertyName.Add(prop); } } if (ActivityLookupColumns != null) { foreach (DictionaryEntry entry in ActivityLookupColumns) { options.ColumnOptions[(string)entry.Key] = new ConvertToDataverseEntityColumnOptions() { LookupColumn = (string)entry.Value }; } } request.Activity = entityConverter.ConvertToDataverseEntity(Activity, ActivityTableName, options); }
            request.TemplateId = TemplateId;
            request.OwnershipOptions = OwnershipOptions;
            request.PostWorkflowEvent = PostWorkflowEvent;
            request.Owner = DataverseEntityConverter.ConvertPSObjectToEntityReference(Owner);
            request.SendEmail = SendEmail;
            request.QueueId = QueueId;

            // Build a short serialized summary of the request for ShouldProcess output
            var requestSummary = new StringBuilder();
            try
            {
                var props = request.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                foreach (var p in props)
                {
                    object val = null;
                    try { val = p.GetValue(request); } catch { val = null; }
                    var vstr = val == null ? "null" : val.ToString();
                    requestSummary.Append(p.Name).Append("=").Append(vstr).Append("; ");
                }
            }
            catch
            {
                // Ignore any errors while serializing the request for what-if messaging
            }

            // Emit verbose output of the serialized request when -Verbose is used
            try { WriteVerbose(requestSummary.ToString()); } catch { }

            // Support -WhatIf and -Confirm; include request summary in the action description
            if (!ShouldProcess(request.GetType().Name, requestSummary.ToString()))
            {
                return;
            }

            var response = Connection.Execute(request);
            WriteObject(response);
        }
    }
}

#pragma warning restore CS1591
