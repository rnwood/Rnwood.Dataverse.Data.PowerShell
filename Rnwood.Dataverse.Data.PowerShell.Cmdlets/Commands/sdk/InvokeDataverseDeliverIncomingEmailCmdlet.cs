// <auto-generated>
//     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-04T16:01:13.5458564+01:00.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

using System;
using System.Text;
using System.Management.Automation;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.PowerPlatform.Dataverse.Client;
using Rnwood.Dataverse.Data.PowerShell.Commands;
using Microsoft.Xrm.Sdk.Metadata;
using System.Collections;

namespace Rnwood.Dataverse.Data.PowerShell.Commands.Sdk
{
    /// <summary>
    /// Contains the data that is needed to create an email activity record from an incoming email message (Track in CRM).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("GenerateRequestCmdlets.ps1", "1.0.0")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [Cmdlet("Invoke", "DataverseDeliverIncomingEmail", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    public class InvokeDataverseDeliverIncomingEmailCmdlet : OrganizationServiceCmdlet
    {
                /// <summary>

                private EntityMetadataFactory entityMetadataFactory;
        private DataverseEntityConverter entityConverter;

                protected override void BeginProcessing()
        {
            base.BeginProcessing();
            entityMetadataFactory = new EntityMetadataFactory(Connection);
            entityConverter = new DataverseEntityConverter(Connection, entityMetadataFactory);
        }

                /// <summary>
        /// Gets or sets the ID of the email message stored in the email header. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the ID of the email message stored in the email header. Required.")]
        public System.String MessageId { get; set; }

        /// <summary>
        /// Gets or sets the subject line for the email message. Optional.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the subject line for the email message. Optional.")]
        public System.String Subject { get; set; }

        /// <summary>
        /// Gets or sets the from address for the email message.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the from address for the email message.")]
        public System.String From { get; set; }

        /// <summary>
        /// Gets or sets the addresses of the recipients of the email message.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the addresses of the recipients of the email message.")]
        public System.String To { get; set; }

        /// <summary>
        /// Gets or sets the addresses of the carbon copy (Cc) recipients for the email message.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the addresses of the carbon copy (Cc) recipients for the email message.")]
        public System.String Cc { get; set; }

        /// <summary>
        /// Gets or sets the addresses of the blind carbon copy (Bcc) recipients for the email message.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the addresses of the blind carbon copy (Bcc) recipients for the email message.")]
        public System.String Bcc { get; set; }

        /// <summary>
        /// Gets or sets the ReceivedOn for the request.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the ReceivedOn for the request.")]
        public System.DateTime ReceivedOn { get; set; }

        /// <summary>
        /// Gets or sets the SubmittedBy for the request.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the SubmittedBy for the request.")]
        public System.String SubmittedBy { get; set; }

        /// <summary>
        /// Gets or sets the Importance for the request.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the Importance for the request.")]
        public System.String Importance { get; set; }

        /// <summary>
        /// Gets or sets the Body for the request.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets the Body for the request.")]
        public System.String Body { get; set; }

        /// <summary>
        /// Gets or sets a collection of activity mime attachment (email attachment) instances to attach to the email message. Required.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets a collection of activity mime attachment (email attachment) instances to attach to the email message. Required.")]
        public Microsoft.Xrm.Sdk.EntityCollection Attachments { get; set; }

        /// <summary>
        /// For internal use only. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.
        /// </summary>

        [Parameter(HelpMessage = "For internal use only. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type.")]
        public PSObject ExtraProperties { get; set; }

        /// <summary>
        /// For internal use only. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. The logical name of the table/entity type for the ExtraProperties parameter.
        /// </summary>

        [Parameter(HelpMessage = "For internal use only. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. The logical name of the table/entity type for the ExtraProperties parameter.")]
        [ArgumentCompleter(typeof(TableNameArgumentCompleter))]
        public string ExtraPropertiesTableName { get; set; }

        /// <summary>
        /// For internal use only. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Properties to ignore when converting ExtraProperties PSObject to Entity.
        /// </summary>

        [Parameter(HelpMessage = "For internal use only. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Properties to ignore when converting ExtraProperties PSObject to Entity.")]
        [ArgumentCompleter(typeof(Rnwood.Dataverse.Data.PowerShell.Commands.PSObjectPropertyNameArgumentCompleter))]
        public string[] ExtraPropertiesIgnoreProperties { get; set; }

        /// <summary>
        /// For internal use only. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Hashtable specifying lookup columns for entity reference conversions in ExtraProperties.
        /// </summary>

        [Parameter(HelpMessage = "For internal use only. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Accepts PSObject with properties that will be converted to Entity. Use corresponding TableName parameter to specify the entity type. Hashtable specifying lookup columns for entity reference conversions in ExtraProperties.")]
        public Hashtable ExtraPropertiesLookupColumns { get; set; }

        /// <summary>
        /// Gets or sets whether to validate before the create operation occurs.
        /// </summary>

        [Parameter(HelpMessage = "Gets or sets whether to validate before the create operation occurs.")]
        public System.Boolean ValidateBeforeCreate { get; set; }

                /// <summary>
        /// Processes the cmdlet request and writes the response to the pipeline.
        /// </summary>
        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            var request = new Microsoft.Crm.Sdk.Messages.DeliverIncomingEmailRequest();
                        request.MessageId = MessageId;
            request.Subject = Subject;
            request.From = From;
            request.To = To;
            request.Cc = Cc;
            request.Bcc = Bcc;
            request.ReceivedOn = ReceivedOn;
            request.SubmittedBy = SubmittedBy;
            request.Importance = Importance;
            request.Body = Body;
            request.Attachments = Attachments;
            { var options = new ConvertToDataverseEntityOptions(); if (ExtraPropertiesIgnoreProperties != null) { foreach (string prop in ExtraPropertiesIgnoreProperties) { options.IgnoredPropertyName.Add(prop); } } if (ExtraPropertiesLookupColumns != null) { foreach (DictionaryEntry entry in ExtraPropertiesLookupColumns) { options.ColumnOptions[(string)entry.Key] = new ConvertToDataverseEntityColumnOptions() { LookupColumn = (string)entry.Value }; } } request.ExtraProperties = entityConverter.ConvertToDataverseEntity(ExtraProperties, ExtraPropertiesTableName, options); }
            request.ValidateBeforeCreate = ValidateBeforeCreate;

            // Build a short serialized summary of the request for ShouldProcess output
            var requestSummary = new StringBuilder();
            try
            {
                var props = request.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                foreach (var p in props)
                {
                    object val = null;
                    try { val = p.GetValue(request); } catch { val = null; }
                    var vstr = val == null ? "null" : val.ToString();
                    requestSummary.Append(p.Name).Append("=").Append(vstr).Append("; ");
                }
            }
            catch
            {
                // Ignore any errors while serializing the request for what-if messaging
            }

            // Emit verbose output of the serialized request when -Verbose is used
            try { WriteVerbose(requestSummary.ToString()); } catch { }

            // Support -WhatIf and -Confirm; include request summary in the action description
            if (!ShouldProcess(request.GetType().Name, requestSummary.ToString()))
            {
                return;
            }

            var response = Connection.Execute(request);
            WriteObject(response);
        }
    }
}

#pragma warning restore CS1591
