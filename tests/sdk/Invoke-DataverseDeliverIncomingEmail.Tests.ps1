# <auto-generated>
#     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-30T07:47:35.4424177+00:00.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
# </auto-generated>

Describe 'Invoke-DataverseDeliverIncomingEmail' -Tag 'SDK' {

    BeforeAll {
        $script:conn = getMockConnection
    }

    It 'Executes successfully with Default parameter set and validates input conversions' {
        # Setup test parameters with known values
        $testMessageId = "TestMessageIdValue"
        $testSubject = "TestSubjectValue"
        $testFrom = "TestFromValue"
        $testTo = "TestToValue"
        $testCc = "TestCcValue"
        $testBcc = "TestBccValue"
        $testSubmittedBy = "TestSubmittedByValue"
        $testImportance = "TestImportanceValue"
        $testBody = "TestBodyValue"
        $entityCollection = New-Object Microsoft.Xrm.Sdk.EntityCollection
        $testEntity = New-Object Microsoft.Xrm.Sdk.Entity('contact')
        $testEntity['firstname'] = 'TestFirst'
        $testEntity['lastname'] = 'TestLast'
        $entityCollection.Entities.Add($testEntity)
        $testAttachments = $entityCollection
        $testExtraProperties = @{ firstname = 'TestFirst'; lastname = 'TestLast'; contactid = [Guid]::NewGuid() }
        $testValidateBeforeCreate = $true

        # Execute the cmdlet - wrap in try-catch for FakeXrmEasy unsupported requests
        $result = try {
            Invoke-DataverseDeliverIncomingEmail -Connection $script:conn -MessageId $testMessageId -Subject $testSubject -From $testFrom -To $testTo -Cc $testCc -Bcc $testBcc -SubmittedBy $testSubmittedBy -Importance $testImportance -Body $testBody -Attachments $testAttachments -ExtraProperties $testExtraProperties -ExtraPropertiesTableName 'contact' -ValidateBeforeCreate $testValidateBeforeCreate
        } catch {
            # If FakeXrmEasy doesn't support this request, create a mock response
            if ($_.Exception.Message -match 'not been implemented|NotImplementedException|not yet supported|OpenSourceUnsupportedException') {
                # Create a mock response object of the expected type
                Write-Verbose "FakeXrmEasy does not support DeliverIncomingEmailRequest, using mock response"
                $mockResponse = New-Object Microsoft.Crm.Sdk.Messages.DeliverIncomingEmailResponse
                $mockResponse
            } else {
                throw
            }
        }

        # Assert response is returned and is correct type
        $result | Should -Not -BeNull
        $result.GetType().FullName | Should -Match 'OrganizationResponse|DeliverIncomingEmail'

        # Test input parameter conversions (basic smoke test that parameters were accepted)
        # Validated that PSObject $testExtraProperties was accepted and converted to Entity
    }

    It 'Supports -WhatIf parameter' {
        # Setup test parameters with known values
        $testMessageId = "TestMessageIdValue"
        $testSubject = "TestSubjectValue"
        $testFrom = "TestFromValue"
        $testTo = "TestToValue"
        $testCc = "TestCcValue"
        $testBcc = "TestBccValue"
        $testSubmittedBy = "TestSubmittedByValue"
        $testImportance = "TestImportanceValue"
        $testBody = "TestBodyValue"
        $entityCollection = New-Object Microsoft.Xrm.Sdk.EntityCollection
        $testEntity = New-Object Microsoft.Xrm.Sdk.Entity('contact')
        $testEntity['firstname'] = 'TestFirst'
        $testEntity['lastname'] = 'TestLast'
        $entityCollection.Entities.Add($testEntity)
        $testAttachments = $entityCollection
        $testExtraProperties = @{ firstname = 'TestFirst'; lastname = 'TestLast'; contactid = [Guid]::NewGuid() }
        $testValidateBeforeCreate = $true

        $result = Invoke-DataverseDeliverIncomingEmail -Connection $script:conn -MessageId $testMessageId -Subject $testSubject -From $testFrom -To $testTo -Cc $testCc -Bcc $testBcc -SubmittedBy $testSubmittedBy -Importance $testImportance -Body $testBody -Attachments $testAttachments -ExtraProperties $testExtraProperties -ExtraPropertiesTableName 'contact' -ValidateBeforeCreate $testValidateBeforeCreate -WhatIf
        # WhatIf should not return a result
        $result | Should -BeNullOrEmpty
    }
}
