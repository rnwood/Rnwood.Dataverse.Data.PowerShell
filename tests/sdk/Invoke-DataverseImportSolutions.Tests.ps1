# <auto-generated>
#     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-08T21:02:21.4392431+00:00.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
# </auto-generated>

. $PSScriptRoot/../Common.ps1

Describe 'Invoke-DataverseImportSolutions' -Tag 'SDK' {

    BeforeAll {
        $script:conn = getMockConnection
    }

    It 'Executes successfully with Default parameter set' {
        # Setup test parameters with known values
        $testOverwriteUnmanagedCustomizations = $true
        $testPublishWorkflows = $true
        $testCustomizationFiles = [System.Text.Encoding]::UTF8.GetBytes('TestDataCustomizationFiles')
        $testImportJobId = [Guid]::Parse('12345678-1234-1234-1234-123456789012')
        $testConvertToManaged = $true
        $testSkipProductUpdateDependencies = $true
        $testHoldingSolution = $true

        $result = Invoke-DataverseImportSolutions -Connection $script:conn -OverwriteUnmanagedCustomizations $testOverwriteUnmanagedCustomizations -PublishWorkflows $testPublishWorkflows -CustomizationFiles $testCustomizationFiles -ImportJobId $testImportJobId -ConvertToManaged $testConvertToManaged -SkipProductUpdateDependencies $testSkipProductUpdateDependencies -HoldingSolution $testHoldingSolution

        # Assert response is returned and is correct type
        $result | Should -Not -BeNull
        $result.GetType().FullName | Should -Match 'OrganizationResponse|ImportSolutions'
    }

    It 'Executes successfully with FromFile parameter set' {
        # Create a temporary test file
        $testFilePath = [System.IO.Path]::GetTempFileName()
        $testData = 'TestFileDataForByteArray'
        [System.IO.File]::WriteAllText($testFilePath, $testData)

        try {
            # Setup test parameters with known values
            $testOverwriteUnmanagedCustomizations = $true
            $testPublishWorkflows = $true
            $testImportJobId = [Guid]::Parse('12345678-1234-1234-1234-123456789012')
            $testConvertToManaged = $true
            $testSkipProductUpdateDependencies = $true
            $testHoldingSolution = $true

            $result = Invoke-DataverseImportSolutions -Connection $script:conn -OverwriteUnmanagedCustomizations $testOverwriteUnmanagedCustomizations -PublishWorkflows $testPublishWorkflows -ImportJobId $testImportJobId -ConvertToManaged $testConvertToManaged -SkipProductUpdateDependencies $testSkipProductUpdateDependencies -HoldingSolution $testHoldingSolution -InFile $testFilePath

            # Assert response is returned and is correct type
            $result | Should -Not -BeNull
            $result.GetType().FullName | Should -Match 'OrganizationResponse|ImportSolutions'
        } finally {
            if (Test-Path $testFilePath) {
                Remove-Item $testFilePath -Force
            }
        }
    }

}
