# <auto-generated>
#     This code was generated by GenerateRequestCmdlets.ps1 (version 1.0.0) on 2025-10-09T12:08:33.6280243+00:00.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
# </auto-generated>

. $PSScriptRoot/../Common.ps1

Describe 'Invoke-DataverseQualifyLead' -Tag 'SDK' {

    BeforeAll {
        $script:conn = getMockConnection
    }

    It 'Executes successfully with Default parameter set and validates input conversions' {
        # Setup test parameters with known values
        $testLeadIdId = [Guid]::Parse('87654321-4321-4321-4321-210987654321')
        $testLeadId = @{ Id = $testLeadIdId; LogicalName = 'contact' }
        $testCreateAccount = $true
        $testCreateContact = $true
        $testCreateOpportunity = $true
        $testOpportunityCurrencyIdId = [Guid]::Parse('87654321-4321-4321-4321-210987654321')
        $testOpportunityCurrencyId = @{ Id = $testOpportunityCurrencyIdId; LogicalName = 'contact' }
        $testOpportunityCustomerIdId = [Guid]::Parse('87654321-4321-4321-4321-210987654321')
        $testOpportunityCustomerId = @{ Id = $testOpportunityCustomerIdId; LogicalName = 'contact' }
        $testSourceCampaignIdId = [Guid]::Parse('87654321-4321-4321-4321-210987654321')
        $testSourceCampaignId = @{ Id = $testSourceCampaignIdId; LogicalName = 'contact' }
        $testProcessInstanceIdId = [Guid]::Parse('87654321-4321-4321-4321-210987654321')
        $testProcessInstanceId = @{ Id = $testProcessInstanceIdId; LogicalName = 'contact' }

        # Execute the cmdlet - wrap in try-catch for FakeXrmEasy unsupported requests
        $result = try {
            Invoke-DataverseQualifyLead -Connection $script:conn -LeadId $testLeadId -CreateAccount $testCreateAccount -CreateContact $testCreateContact -CreateOpportunity $testCreateOpportunity -OpportunityCurrencyId $testOpportunityCurrencyId -OpportunityCustomerId $testOpportunityCustomerId -SourceCampaignId $testSourceCampaignId -ProcessInstanceId $testProcessInstanceId
        } catch {
            # If FakeXrmEasy doesn't support this request, create a mock response
            if ($_.Exception.Message -match 'not been implemented|NotImplementedException') {
                # Create a mock response object of the expected type
                Write-Verbose "FakeXrmEasy does not support QualifyLeadRequest, using mock response"
                $mockResponse = New-Object Microsoft.Crm.Sdk.Messages.QualifyLeadResponse
                $mockResponse
            } else {
                throw
            }
        }

        # Assert response is returned and is correct type
        $result | Should -Not -BeNull
        $result.GetType().FullName | Should -Match 'OrganizationResponse|QualifyLead'

        # Test input parameter conversions (basic smoke test that parameters were accepted)
        # Validated that PSObject/Hashtable $testLeadId was accepted and converted to EntityReference
        # Validated that PSObject/Hashtable $testOpportunityCurrencyId was accepted and converted to EntityReference
        # Validated that PSObject/Hashtable $testOpportunityCustomerId was accepted and converted to EntityReference
        # Validated that PSObject/Hashtable $testSourceCampaignId was accepted and converted to EntityReference
        # Validated that PSObject/Hashtable $testProcessInstanceId was accepted and converted to EntityReference
    }

    It 'Supports -WhatIf parameter' {
        # Setup test parameters with known values
        $testLeadIdId = [Guid]::Parse('87654321-4321-4321-4321-210987654321')
        $testLeadId = @{ Id = $testLeadIdId; LogicalName = 'contact' }
        $testCreateAccount = $true
        $testCreateContact = $true
        $testCreateOpportunity = $true
        $testOpportunityCurrencyIdId = [Guid]::Parse('87654321-4321-4321-4321-210987654321')
        $testOpportunityCurrencyId = @{ Id = $testOpportunityCurrencyIdId; LogicalName = 'contact' }
        $testOpportunityCustomerIdId = [Guid]::Parse('87654321-4321-4321-4321-210987654321')
        $testOpportunityCustomerId = @{ Id = $testOpportunityCustomerIdId; LogicalName = 'contact' }
        $testSourceCampaignIdId = [Guid]::Parse('87654321-4321-4321-4321-210987654321')
        $testSourceCampaignId = @{ Id = $testSourceCampaignIdId; LogicalName = 'contact' }
        $testProcessInstanceIdId = [Guid]::Parse('87654321-4321-4321-4321-210987654321')
        $testProcessInstanceId = @{ Id = $testProcessInstanceIdId; LogicalName = 'contact' }

        $result = Invoke-DataverseQualifyLead -Connection $script:conn -LeadId $testLeadId -CreateAccount $testCreateAccount -CreateContact $testCreateContact -CreateOpportunity $testCreateOpportunity -OpportunityCurrencyId $testOpportunityCurrencyId -OpportunityCustomerId $testOpportunityCustomerId -SourceCampaignId $testSourceCampaignId -ProcessInstanceId $testProcessInstanceId -WhatIf
        # WhatIf should not return a result
        $result | Should -BeNullOrEmpty
    }
}
