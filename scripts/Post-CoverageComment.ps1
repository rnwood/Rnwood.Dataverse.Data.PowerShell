#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Posts a code coverage report as a comment to a GitHub Pull Request.
.DESCRIPTION
    This script reads a coverage report markdown file and posts it as a comment
    to the specified GitHub Pull Request using the GitHub API.
.PARAMETER ReportFile
    Path to the markdown coverage report file. Default: coverage/coverage-report.md
.PARAMETER GitHubToken
    GitHub Personal Access Token or GITHUB_TOKEN from Actions. Required.
.PARAMETER Repository
    GitHub repository in format 'owner/repo'. Default: extracted from git remote
.PARAMETER PullRequestNumber
    Pull request number to comment on. Default: extracted from environment
.EXAMPLE
    ./Post-CoverageComment.ps1 -GitHubToken $env:GITHUB_TOKEN -PullRequestNumber 123
#>
param(
    [Parameter()]
    [string]$ReportFile = "",

    [Parameter(Mandatory)]
    [string]$GitHubToken,

    [Parameter()]
    [string]$Repository = "",

    [Parameter()]
    [int]$PullRequestNumber = 0
)

$ErrorActionPreference = 'Stop'

$repoRoot = Split-Path -Parent $PSScriptRoot

# Set default report file if not provided
if ([string]::IsNullOrEmpty($ReportFile)) {
    $ReportFile = Join-Path $repoRoot "coverage/coverage-report.md"
}

# Check if report file exists
if (-not (Test-Path $ReportFile)) {
    throw "Coverage report file not found: $ReportFile. Run Generate-CoverageReport.ps1 first."
}

Write-Host "Posting Coverage Comment to GitHub PR" -ForegroundColor Cyan
Write-Host "======================================" -ForegroundColor Cyan
Write-Host ""

# Determine repository
if ([string]::IsNullOrEmpty($Repository)) {
    if ($env:GITHUB_REPOSITORY) {
        $Repository = $env:GITHUB_REPOSITORY
        Write-Host "Repository from GITHUB_REPOSITORY: $Repository" -ForegroundColor Gray
    } else {
        # Try to extract from git remote
        try {
            $gitRemote = git remote get-url origin
            if ($gitRemote -match 'github\.com[:/](.+/.+?)(\.git)?$') {
                $Repository = $matches[1] -replace '\.git$', ''
                Write-Host "Repository from git remote: $Repository" -ForegroundColor Gray
            } else {
                throw "Could not extract repository from git remote: $gitRemote"
            }
        } catch {
            throw "Could not determine repository. Please provide -Repository parameter or set GITHUB_REPOSITORY environment variable."
        }
    }
}

# Determine PR number
if ($PullRequestNumber -eq 0) {
    if ($env:GITHUB_EVENT_PATH) {
        # Try to read from GitHub Actions event
        $eventJson = Get-Content $env:GITHUB_EVENT_PATH -Raw | ConvertFrom-Json
        if ($eventJson.pull_request) {
            $PullRequestNumber = $eventJson.pull_request.number
            Write-Host "PR number from GitHub event: $PullRequestNumber" -ForegroundColor Gray
        } elseif ($eventJson.number) {
            $PullRequestNumber = $eventJson.number
            Write-Host "PR number from GitHub event: $PullRequestNumber" -ForegroundColor Gray
        }
    }
    
    # Try to extract from git branch
    if ($PullRequestNumber -eq 0 -and $env:GITHUB_REF -match 'refs/pull/(\d+)/') {
        $PullRequestNumber = [int]$matches[1]
        Write-Host "PR number from GITHUB_REF: $PullRequestNumber" -ForegroundColor Gray
    }
    
    if ($PullRequestNumber -eq 0) {
        throw "Could not determine PR number. Please provide -PullRequestNumber parameter or ensure this is running in a PR context."
    }
}

Write-Host ""
Write-Host "Reading coverage report from: $ReportFile" -ForegroundColor Yellow
$reportContent = Get-Content $ReportFile -Raw

# Prepare the comment body
$commentBody = @"
## ðŸ“Š Code Coverage Report

$reportContent

---
*Coverage report automatically generated by [Generate-CoverageReport.ps1](../scripts/Generate-CoverageReport.ps1)*
"@

# Prepare API request
$apiUrl = "https://api.github.com/repos/$Repository/issues/$PullRequestNumber/comments"
$headers = @{
    "Authorization" = "Bearer $GitHubToken"
    "Accept" = "application/vnd.github+json"
    "X-GitHub-Api-Version" = "2022-11-28"
}

$body = @{
    body = $commentBody
} | ConvertTo-Json -Depth 10

Write-Host ""
Write-Host "Posting comment to PR #$PullRequestNumber in $Repository..." -ForegroundColor Yellow

try {
    # Check if there's an existing coverage comment to update
    Write-Host "Checking for existing coverage comments..." -ForegroundColor Gray
    $existingCommentsUrl = "https://api.github.com/repos/$Repository/issues/$PullRequestNumber/comments"
    $existingComments = Invoke-RestMethod -Uri $existingCommentsUrl -Headers $headers -Method Get
    
    $coverageComment = $existingComments | Where-Object { 
        $_.body -like "*Code Coverage Report*" -and $_.body -like "*automatically generated*" 
    } | Select-Object -First 1
    
    if ($coverageComment) {
        Write-Host "Found existing coverage comment (ID: $($coverageComment.id)), updating it..." -ForegroundColor Yellow
        $updateUrl = "https://api.github.com/repos/$Repository/issues/comments/$($coverageComment.id)"
        $response = Invoke-RestMethod -Uri $updateUrl -Headers $headers -Method Patch -Body $body -ContentType "application/json"
        Write-Host "âœ“ Successfully updated coverage comment!" -ForegroundColor Green
    } else {
        Write-Host "No existing coverage comment found, creating new one..." -ForegroundColor Yellow
        $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Post -Body $body -ContentType "application/json"
        Write-Host "âœ“ Successfully posted coverage comment!" -ForegroundColor Green
    }
    
    Write-Host "Comment URL: $($response.html_url)" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "Done!" -ForegroundColor Green
    
} catch {
    Write-Error "Failed to post comment to GitHub: $_"
    Write-Error "Response: $($_.Exception.Response)"
    throw
}
