name: Build / publish

on:
  push:
  pull_request:
    types: [opened, reopened, synchronize]
  release:
    types: [published]

jobs:
  test-coverage:
    # Run coverage report only on pull requests
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for comparing with base branch
      
      - name: Install PowerShell
        uses: PSModule/install-powershell@v1
        with:
          Version: latest
      
      - name: Build
        shell: pwsh
        run: |
          dotnet build -c Release ./Rnwood.Dataverse.Data.PowerShell/Rnwood.Dataverse.Data.PowerShell.csproj
          if (test-path out/Rnwood.Dataverse.Data.PowerShell) {
            remove-item -force -recurse out/Rnwood.Dataverse.Data.PowerShell
          }
          copy-item -recurse Rnwood.Dataverse.Data.PowerShell\bin\Release\netstandard2.0 out/Rnwood.Dataverse.Data.PowerShell
      
      - name: Generate Coverage Report for PR
        id: pr-coverage
        shell: pwsh
        run: |
          Write-Host "Generating coverage report for PR..."
          $env:TESTMODULEPATH = (Resolve-Path "out/Rnwood.Dataverse.Data.PowerShell")
          
          # Run coverage script
          pwsh -File scripts/Generate-TestCoverageReport.ps1
          
          # Read the markdown report
          $report = Get-Content coverage/test-coverage-report.md -Raw
          
          # Set output for PR comment (escape newlines for GitHub Actions)
          $report = $report -replace "`r`n", "%0A" -replace "`n", "%0A"
          "COVERAGE_REPORT=$report" >> $env:GITHUB_OUTPUT
      
      - name: Get Baseline Coverage from Base Branch
        id: base-coverage
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "Checking out base branch to get baseline coverage..."
          
          # Store current HEAD
          $prBranch = $env:GITHUB_HEAD_REF
          $baseBranch = $env:GITHUB_BASE_REF
          
          Write-Host "PR branch: $prBranch"
          Write-Host "Base branch: $baseBranch"
          
          # Save the coverage script from PR branch (in case it doesn't exist on base)
          $coverageScript = Get-Content scripts/Generate-TestCoverageReport.ps1 -Raw
          $tempScriptPath = [System.IO.Path]::GetTempFileName() + ".ps1"
          $coverageScript | Set-Content -Path $tempScriptPath
          
          # Checkout base branch
          git checkout "origin/$baseBranch"
          
          # Build base branch
          dotnet build -c Release ./Rnwood.Dataverse.Data.PowerShell/Rnwood.Dataverse.Data.PowerShell.csproj
          if (test-path out/Rnwood.Dataverse.Data.PowerShell) {
            remove-item -force -recurse out/Rnwood.Dataverse.Data.PowerShell
          }
          copy-item -recurse Rnwood.Dataverse.Data.PowerShell\bin\Release\netstandard2.0 out/Rnwood.Dataverse.Data.PowerShell
          
          # Generate baseline coverage using saved script
          $env:TESTMODULEPATH = (Resolve-Path "out/Rnwood.Dataverse.Data.PowerShell")
          pwsh -File $tempScriptPath -OutputJson coverage/baseline-coverage.json
          
          # Clean up temp script
          Remove-Item $tempScriptPath -ErrorAction SilentlyContinue
          
          # Return to PR branch
          git checkout -
          
          # Rebuild PR branch
          dotnet build -c Release ./Rnwood.Dataverse.Data.PowerShell/Rnwood.Dataverse.Data.PowerShell.csproj
          if (test-path out/Rnwood.Dataverse.Data.PowerShell) {
            remove-item -force -recurse out/Rnwood.Dataverse.Data.PowerShell
          }
          copy-item -recurse Rnwood.Dataverse.Data.PowerShell\bin\Release\netstandard2.0 out/Rnwood.Dataverse.Data.PowerShell
          
          Write-Host "Baseline coverage captured"
      
      - name: Generate Coverage Report with Delta
        if: steps.base-coverage.outcome == 'success'
        shell: pwsh
        run: |
          Write-Host "Generating coverage report with baseline comparison..."
          $env:TESTMODULEPATH = (Resolve-Path "out/Rnwood.Dataverse.Data.PowerShell")
          
          # Run coverage script with baseline
          pwsh -File scripts/Generate-TestCoverageReport.ps1 -BaselineJson coverage/baseline-coverage.json
      
      - name: Comment PR with Coverage Report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('coverage/test-coverage-report.md', 'utf8');
            
            // Find existing coverage comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ“Š Code Coverage Report')
            );
            
            const commentBody = report;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
      
      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/test-coverage-report.md
            coverage/test-coverage.json
  
  main:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            publish: false
            powershell_version: "7.4.11"
          - os: windows-latest
            publish: false
            powershell_version: "7.4.11"
          - os: ubuntu-latest
            publish: false
            powershell_version: latest
          - os: windows-latest
            publish: false
            powershell_version: latest
          - os: windows-latest
            publish: true
            powershell_version: '5'

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      - if: ${{ matrix.powershell_version != '5' }}
        name: Install PowerShell ${{ matrix.powershell_version }}
        uses: PSModule/install-powershell@v1
        with:
          Version: ${{ matrix.powershell_version }}
      - name: Build
        shell: pwsh
        run: |       
          if ($env:GITHUB_REF -like "refs/tags/*") {
            $versionnumber = $env:GITHUB_REF -replace "refs/tags/", ""
            $manifestpath = "Rnwood.Dataverse.Data.PowerShell//Rnwood.Dataverse.Data.PowerShell.psd1"
            (get-content -raw -encoding UTF8 $manifestpath ) -replace "ModuleVersion ?=.*", "ModuleVersion = `"$versionnumber`"" | set-content -encoding UTF8 $manifestpath
          }

          dotnet build -c Release ./Rnwood.Dataverse.Data.PowerShell/Rnwood.Dataverse.Data.PowerShell.csproj
          if (test-path out/Rnwood.Dataverse.Data.PowerShell) {
            remove-item -force -recurse out/Rnwood.Dataverse.Data.PowerShell
          }
          copy-item -recurse Rnwood.Dataverse.Data.PowerShell\bin\Release\netstandard2.0 out/Rnwood.Dataverse.Data.PowerShell
      - if: ${{ matrix.powershell_version != '5' }}
        name: Test - pwsh
        shell: pwsh
        run: |
          Write-Host "Using PowerShell $($PSVersionTable.PSVersion)"    
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
          
          # Run tests with CI-friendly output
          # -CI enables test results and proper exit codes for CI environments
          # Pester 5.x runs tests in parallel by default
          $config = New-PesterConfiguration
          $config.Run.Path = 'tests'
          $config.Run.PassThru = $true
          $config.Run.Exit = $true
          $config.Output.Verbosity = 'Normal'
          $config.Output.CIFormat = 'GithubActions'
          $config.Should.ErrorAction = 'Continue'
          
          $result = Invoke-Pester -Configuration $config
          
          Write-Host ""
          Write-Host "Test Summary:" -ForegroundColor Cyan
          Write-Host "  Total:   $($result.TotalCount)" -ForegroundColor White
          Write-Host "  Passed:  $($result.PassedCount)" -ForegroundColor Green
          Write-Host "  Failed:  $($result.FailedCount)" -ForegroundColor $(if ($result.FailedCount -gt 0) { "Red" } else { "Green" })
          Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
          
          if ($result.FailedCount -gt 0) {
            Write-Host ""
            Write-Host "Failed Tests:" -ForegroundColor Red
            foreach ($test in $result.Failed) {
              Write-Host "  - $($test.ExpandedPath)" -ForegroundColor Red
              Write-Host "    $($test.ErrorRecord.Exception.Message)" -ForegroundColor Gray
            }
            throw "Tests failed"
          }
      - if:  ${{ matrix.powershell_version == '5' }}
        name: Test - powershell
        shell: powershell
        run: |  
            $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")
  
            Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
            
            # Run tests with CI-friendly output
            # -CI enables test results and proper exit codes for CI environments
            # Pester 5.x runs tests in parallel by default
            $config = New-PesterConfiguration
            $config.Run.Path = 'tests'
            $config.Run.PassThru = $true
            $config.Run.Exit = $true
            $config.Output.Verbosity = 'Normal'
            $config.Output.CIFormat = 'GithubActions'
            $config.Should.ErrorAction = 'Continue'
            
            $result = Invoke-Pester -Configuration $config
            
            Write-Host ""
            Write-Host "Test Summary:" -ForegroundColor Cyan
            Write-Host "  Total:   $($result.TotalCount)" -ForegroundColor White
            Write-Host "  Passed:  $($result.PassedCount)" -ForegroundColor Green
            Write-Host "  Failed:  $($result.FailedCount)" -ForegroundColor $(if ($result.FailedCount -gt 0) { "Red" } else { "Green" })
            Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
            
            if ($result.FailedCount -gt 0) {
              Write-Host ""
              Write-Host "Failed Tests:" -ForegroundColor Red
              foreach ($test in $result.Failed) {
                Write-Host "  - $($test.ExpandedPath)" -ForegroundColor Red
                Write-Host "    $($test.ErrorRecord.Exception.Message)" -ForegroundColor Gray
              }
              throw "Tests failed"
            }
      - if: ${{ matrix.powershell_version != '5' }}
        name: E2E Test - pwsh
        shell: pwsh
        env:
          E2ETESTS_URL: ${{ vars.E2ETESTS_URL }}
          E2ETESTS_CLIENTID: ${{ vars.E2ETESTS_CLIENTID }}
          E2ETESTS_CLIENTSECRET: ${{ secrets.E2ETESTS_CLIENTSECRET }}
        run: |  
          Write-Host "Using PowerShell $($PSVersionTable.PSVersion)"
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
          Invoke-Pester -output detailed -path e2e-tests
          if ($LASTEXITCODE -ne 0) {
            throw "Tests failed"
          }
      - if:  ${{ matrix.powershell_version == '5' }}
        name: E2E Test - powershell
        shell: powershell
        env:
          E2ETESTS_URL: ${{ vars.E2ETESTS_URL }}
          E2ETESTS_CLIENTID: ${{ vars.E2ETESTS_CLIENTID }}
          E2ETESTS_CLIENTSECRET: ${{ secrets.E2ETESTS_CLIENTSECRET }}
        run: |  
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
          Invoke-Pester -output detailed -path e2e-tests
          if ($LASTEXITCODE -ne 0) {
            throw "Tests failed"
          }      
      - if: ${{ matrix.publish && github.event_name == 'release' && github.event.action == 'published' }}
        name: Publish
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        shell: pwsh
        run: |
          Publish-Module -Path out/Rnwood.Dataverse.Data.PowerShell -NuGetApiKey $env:NUGET_KEY -Verbose