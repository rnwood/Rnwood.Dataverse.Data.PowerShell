name: Build / publish

on:
  push:
  pull_request:
    types: [opened, reopened, synchronize]
  release:
    types: [published]

jobs:
  test-coverage:
    # Run coverage with instrumentation on pull requests
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '8.0.x'
      
      - name: Install PowerShell
        uses: PSModule/install-powershell@v1
        with:
          Version: latest
      
      - name: Run Tests with Coverage
        shell: pwsh
        run: |
          # The script handles building with instrumentation
          pwsh -File scripts/Run-TestsWithCoverage.ps1
      
      - name: Get Baseline Coverage
        id: baseline
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "Getting baseline coverage from base branch..."
          
          # Save the coverage script
          $coverageScript = Get-Content scripts/Run-TestsWithCoverage.ps1 -Raw
          $tempScript = Join-Path $env:RUNNER_TEMP "coverage-script.ps1"
          $coverageScript | Set-Content -Path $tempScript
          
          # Checkout base branch
          git checkout origin/${{ github.base_ref }}
          
          # Run coverage on base (script handles building with instrumentation)
          New-Item -ItemType Directory -Force -Path coverage-baseline | Out-Null
          pwsh -File $tempScript -OutputDir coverage-baseline
          
          # Copy baseline data
          if (Test-Path coverage-baseline/coverage-data.json) {
            Copy-Item coverage-baseline/coverage-data.json coverage/baseline-coverage.json
          }
          
          # Return to PR
          git checkout -
      
      - name: Generate Report with Delta
        if: steps.baseline.outcome == 'success'
        shell: pwsh
        run: |
          Write-Host "Regenerating coverage report with baseline comparison..."
          pwsh -File scripts/Run-TestsWithCoverage.ps1 -BaselineCoverageFile coverage/baseline-coverage.json
      
      - name: Comment PR
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('coverage/coverage-report.md', 'utf8');
            
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üìä Code Coverage Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }
      
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v5
        with:
          name: coverage-reports
          path: |
            coverage/coverage.cobertura.xml
            coverage/coverage.json
            coverage/coverage-report.md
            coverage/coverage-data.json
  
  main:
    permissions:
      contents: write  # Required for creating GitHub releases
      pull-requests: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            publish: false
            powershell_version: "7.4.11"
          - os: windows-latest
            publish: false
            powershell_version: "7.4.11"
          - os: ubuntu-latest
            publish: false
            powershell_version: latest
          - os: windows-latest
            publish: false
            powershell_version: latest
          - os: windows-latest
            publish: true
            powershell_version: '5'

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for tags
      - if: ${{ matrix.powershell_version != '5' }}
        name: Install PowerShell ${{ matrix.powershell_version }}
        uses: PSModule/install-powershell@v1
        with:
          Version: ${{ matrix.powershell_version }}
      - name: Build
        shell: pwsh
        run: |       
          $manifestpath = "Rnwood.Dataverse.Data.PowerShell/Rnwood.Dataverse.Data.PowerShell.psd1"
          
          if ($env:GITHUB_REF -like "refs/tags/*") {
            # Release build - use tag version
            $versionnumber = $env:GITHUB_REF -replace "refs/tags/", ""
            (get-content -raw -encoding UTF8 $manifestpath ) -replace "ModuleVersion ?=.*", "ModuleVersion = `"$versionnumber`"" | set-content -encoding UTF8 $manifestpath
            Write-Host "Release version: $versionnumber"
          } elseif ($env:GITHUB_REF -eq "refs/heads/main") {
            # CI build on main branch - auto-determine version with -ci suffix
            $latestTag = git describe --tags --abbrev=0 2>$null
            if (-not $latestTag) {
              $latestTag = "0.0.0"
            }
            
            # Parse version from tag
            if ($latestTag -match '^v?(\d+\.\d+\.\d+)') {
              $baseVersion = $matches[1]
            } else {
              $baseVersion = "0.0.0"
            }
            
            # Get commit count since last tag as build number
            $commitsSinceTag = git rev-list --count "${latestTag}..HEAD" 2>$null
            if ($null -eq $commitsSinceTag -or $commitsSinceTag -eq "") {
              $commitsSinceTag = git rev-list --count HEAD
            }
            
            # Build CI version with prerelease suffix
            $prereleaseString = "ci.$commitsSinceTag"
            
            # Update manifest with base version
            (get-content -raw -encoding UTF8 $manifestpath) -replace "ModuleVersion ?=.*", "ModuleVersion = `"$baseVersion`"" | set-content -encoding UTF8 $manifestpath
            
            # Add prerelease to PrivateData.PSData
            $content = get-content -raw -encoding UTF8 $manifestpath
            # Only add if Prerelease doesn't already exist
            if ($content -notmatch "Prerelease\s*=") {
              if ($content -match "PrivateData\s*=\s*@\{") {
                if ($content -match "PSData\s*=\s*@\{") {
                  # PSData section exists - add Prerelease field
                  $content = $content -replace "(PSData\s*=\s*@\{)", "`$1`n`t`tPrerelease = '$prereleaseString'"
                } else {
                  # Add PSData section with Prerelease
                  $content = $content -replace "(PrivateData\s*=\s*@\{)", "`$1`n`tPSData = @{`n`t`tPrerelease = '$prereleaseString'`n`t}"
                }
              }
            }
            $content | set-content -encoding UTF8 $manifestpath
            
            Write-Host "CI version: $baseVersion-$prereleaseString"
            # Save version for later steps
            "$baseVersion-$prereleaseString" | Out-File -FilePath ci-version.txt -Encoding utf8
          }

          dotnet build -c Release ./Rnwood.Dataverse.Data.PowerShell/Rnwood.Dataverse.Data.PowerShell.csproj
          if (test-path out/Rnwood.Dataverse.Data.PowerShell) {
            remove-item -force -recurse out/Rnwood.Dataverse.Data.PowerShell
          }
          copy-item -recurse Rnwood.Dataverse.Data.PowerShell\bin\Release\netstandard2.0 out/Rnwood.Dataverse.Data.PowerShell
      - if: ${{ matrix.powershell_version != '5' }}
        name: Test - pwsh
        id: test-pwsh
        shell: pwsh
        run: |
          Write-Host "Using PowerShell $($PSVersionTable.PSVersion)"    
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
          
          # Run tests with CI-friendly output
          # Pester 5.x runs tests in parallel by default
          $config = New-PesterConfiguration
          $config.Run.Path = 'tests/All.Tests.ps1'
          $config.Run.PassThru = $true
          $config.Output.Verbosity = 'Normal'
          $config.Output.CIFormat = 'GithubActions'
          $config.Should.ErrorAction = 'Continue'
          
          $result = Invoke-Pester -Configuration $config
          
          Write-Host ""
          Write-Host "Test Summary:" -ForegroundColor Cyan
          Write-Host "  Total:   $($result.TotalCount)" -ForegroundColor White
          Write-Host "  Passed:  $($result.PassedCount)" -ForegroundColor Green
          Write-Host "  Failed:  $($result.FailedCount)" -ForegroundColor $(if ($result.FailedCount -gt 0) { "Red" } else { "Green" })
          Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
          
          if ($result.FailedCount -gt 0) {
            Write-Host ""
            Write-Host "Failed Tests:" -ForegroundColor Red
            
            # Save test failure details to file for PR comment
            # Sanitize filename by replacing dots and spaces
            $osName = "${{ matrix.os }}".Replace(' ', '-')
            $psVersion = "${{ matrix.powershell_version }}".Replace('.', '-').Replace(' ', '-')
            $fileName = "test-failures-$osName-ps$psVersion.md"
            
            $failureReport = "## ‚ùå Test Failures - ${{ matrix.os }} / PowerShell ${{ matrix.powershell_version }}`n`n"
            $failureReport += "**Total Tests:** $($result.TotalCount)  `n"
            $failureReport += "**Passed:** $($result.PassedCount)  `n"
            $failureReport += "**Failed:** $($result.FailedCount)  `n"
            $failureReport += "**Skipped:** $($result.SkippedCount)`n`n"
            $failureReport += "### Failed Tests:`n`n"
            
            foreach ($test in $result.Failed) {
              Write-Host "  - $($test.ExpandedPath)" -ForegroundColor Red
              Write-Host "    $($test.ErrorRecord.Exception.Message)" -ForegroundColor Gray
              $failureReport += "- **$($test.ExpandedPath)**`n  ``````n  $($test.ErrorRecord.Exception.Message)`n  ``````n"
            }
            
            # Write file and ensure it's flushed to disk
            $failureReport | Out-File -FilePath $fileName -Encoding utf8 -Force
            Write-Host "Created failure report: $fileName"
            
            # Use exit instead of throw to ensure file is preserved
            exit 1
          }
      - if:  ${{ matrix.powershell_version == '5' }}
        name: Test - powershell
        id: test-powershell
        shell: powershell
        run: |  
            $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")
  
            Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
            
            # Run tests with CI-friendly output
            # Pester 5.x runs tests in parallel by default
            $config = New-PesterConfiguration
            $config.Run.Path = 'tests/All.Tests.ps1'
            $config.Run.PassThru = $true
            $config.Output.Verbosity = 'Normal'
            $config.Output.CIFormat = 'GithubActions'
            $config.Should.ErrorAction = 'Continue'
            
            $result = Invoke-Pester -Configuration $config
            
            Write-Host ""
            Write-Host "Test Summary:" -ForegroundColor Cyan
            Write-Host "  Total:   $($result.TotalCount)" -ForegroundColor White
            Write-Host "  Passed:  $($result.PassedCount)" -ForegroundColor Green
            Write-Host "  Failed:  $($result.FailedCount)" -ForegroundColor $(if ($result.FailedCount -gt 0) { "Red" } else { "Green" })
            Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
            
            if ($result.FailedCount -gt 0) {
              Write-Host ""
              Write-Host "Failed Tests:" -ForegroundColor Red
              
              # Save test failure details to file for PR comment
              # Sanitize filename by replacing dots and spaces
              $osName = "${{ matrix.os }}".Replace(' ', '-')
              $psVersion = "${{ matrix.powershell_version }}".Replace('.', '-').Replace(' ', '-')
              $fileName = "test-failures-$osName-ps$psVersion.md"
              
              $failureReport = "## ‚ùå Test Failures - ${{ matrix.os }} / PowerShell ${{ matrix.powershell_version }}`n`n"
              $failureReport += "**Total Tests:** $($result.TotalCount)  `n"
              $failureReport += "**Passed:** $($result.PassedCount)  `n"
              $failureReport += "**Failed:** $($result.FailedCount)  `n"
              $failureReport += "**Skipped:** $($result.SkippedCount)`n`n"
              $failureReport += "### Failed Tests:`n`n"
              
              foreach ($test in $result.Failed) {
                Write-Host "  - $($test.ExpandedPath)" -ForegroundColor Red
                Write-Host "    $($test.ErrorRecord.Exception.Message)" -ForegroundColor Gray
                $failureReport += "- **$($test.ExpandedPath)**`n  ``````n  $($test.ErrorRecord.Exception.Message)`n  ``````n"
              }
              
              # Write file and ensure it's flushed to disk
              $failureReport | Out-File -FilePath $fileName -Encoding utf8 -Force
              Write-Host "Created failure report: $fileName"
              
              # Use exit instead of throw to ensure file is preserved
              exit 1
            }
      - if: ${{ matrix.powershell_version != '5' }}
        name: E2E Test - pwsh
        shell: pwsh
        env:
          E2ETESTS_URL: ${{ vars.E2ETESTS_URL }}
          E2ETESTS_CLIENTID: ${{ vars.E2ETESTS_CLIENTID }}
          E2ETESTS_CLIENTSECRET: ${{ secrets.E2ETESTS_CLIENTSECRET }}
        run: |  
          Write-Host "Using PowerShell $($PSVersionTable.PSVersion)"
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
          Invoke-Pester -output detailed -path e2e-tests
          if ($LASTEXITCODE -ne 0) {
            throw "Tests failed"
          }
      - if:  ${{ matrix.powershell_version == '5' }}
        name: E2E Test - powershell
        shell: powershell
        env:
          E2ETESTS_URL: ${{ vars.E2ETESTS_URL }}
          E2ETESTS_CLIENTID: ${{ vars.E2ETESTS_CLIENTID }}
          E2ETESTS_CLIENTSECRET: ${{ secrets.E2ETESTS_CLIENTSECRET }}
        run: |  
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
          Invoke-Pester -output detailed -path e2e-tests
          if ($LASTEXITCODE -ne 0) {
            throw "Tests failed"
          }      
      - if: ${{ matrix.publish && github.event_name == 'release' && github.event.action == 'published' }}
        name: Publish Release to PowerShell Gallery
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        shell: pwsh
        run: |
          Publish-Module -Path out/Rnwood.Dataverse.Data.PowerShell -NuGetApiKey $env:NUGET_KEY -Verbose
      
      # CI Build Publishing (main branch only)
      - if: ${{ matrix.publish && github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        name: Create CI Build Artifact
        shell: pwsh
        run: |
          # Create a zip file of the module
          Compress-Archive -Path out/Rnwood.Dataverse.Data.PowerShell -DestinationPath Rnwood.Dataverse.Data.PowerShell-CI.zip -Force
      
      - if: ${{ matrix.publish && github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        name: Create GitHub Release for CI Build
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const version = fs.readFileSync('ci-version.txt', 'utf8').trim();
            const shortSha = context.sha.substring(0, 7);
            
            // Create prerelease
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `CI Build ${version}`,
              body: `Automated CI build from commit ${shortSha}\n\n**This is a prerelease version for testing purposes.**\n\nCommit: ${context.sha}\nBranch: main`,
              draft: false,
              prerelease: true,
              target_commitish: context.sha
            });
            
            // Upload the zip artifact
            const assetData = fs.readFileSync('Rnwood.Dataverse.Data.PowerShell-CI.zip');
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: 'Rnwood.Dataverse.Data.PowerShell-CI.zip',
              data: assetData
            });
      
      - if: ${{ matrix.publish && github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        name: Publish CI Build to PowerShell Gallery
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        shell: pwsh
        run: |
          # Publish prerelease to PowerShell Gallery
          Publish-Module -Path out/Rnwood.Dataverse.Data.PowerShell -NuGetApiKey $env:NUGET_KEY -Verbose -AllowPrerelease
      
      # Upload test failure reports as artifacts
      - name: Upload test failure report
        if: failure() && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v5
        with:
          name: test-failures-${{ matrix.os }}-${{ matrix.powershell_version }}
          path: test-failures-*.md
          if-no-files-found: ignore
      
      # Comment on PR with test failures
      - name: Comment on PR with test failures
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find failure report file
            const files = fs.readdirSync('.');
            const failureFile = files.find(f => f.startsWith('test-failures-'));
            
            if (!failureFile) {
              console.log('No test failure report found');
              return;
            }
            
            const failureContent = fs.readFileSync(failureFile, 'utf8');
            
            // Create comment body with @copilot mention
            const commentBody = `@copilot please investigate these test failures:

            ${failureContent}

            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Commit:** ${{ github.sha }}
            `;
            
            // Post comment to PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });