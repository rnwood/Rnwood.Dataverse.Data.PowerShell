name: Build / publish

on:
  push:
  pull_request:
    types: [opened, reopened, synchronize]
  release:
    types: [published]

jobs:
  main:
    permissions:
      contents: read
      pull-requests: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            publish: false
            powershell_version: "7.4.11"
          - os: windows-latest
            publish: false
            powershell_version: "7.4.11"
          - os: ubuntu-latest
            publish: false
            powershell_version: latest
          - os: windows-latest
            publish: false
            powershell_version: latest
          - os: windows-latest
            publish: true
            powershell_version: '5'

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      - if: ${{ matrix.powershell_version != '5' }}
        name: Install PowerShell ${{ matrix.powershell_version }}
        uses: PSModule/install-powershell@v1
        with:
          Version: ${{ matrix.powershell_version }}
      - name: Build
        shell: pwsh
        run: |       
          if ($env:GITHUB_REF -like "refs/tags/*") {
            $versionnumber = $env:GITHUB_REF -replace "refs/tags/", ""
            $manifestpath = "Rnwood.Dataverse.Data.PowerShell//Rnwood.Dataverse.Data.PowerShell.psd1"
            (get-content -raw -encoding UTF8 $manifestpath ) -replace "ModuleVersion ?=.*", "ModuleVersion = `"$versionnumber`"" | set-content -encoding UTF8 $manifestpath
          }

          dotnet build -c Release ./Rnwood.Dataverse.Data.PowerShell/Rnwood.Dataverse.Data.PowerShell.csproj
          if (test-path out/Rnwood.Dataverse.Data.PowerShell) {
            remove-item -force -recurse out/Rnwood.Dataverse.Data.PowerShell
          }
          copy-item -recurse Rnwood.Dataverse.Data.PowerShell\bin\Release\netstandard2.0 out/Rnwood.Dataverse.Data.PowerShell
      - if: ${{ matrix.powershell_version != '5' }}
        name: Test - pwsh
        id: test-pwsh
        shell: pwsh
        run: |
          Write-Host "Using PowerShell $($PSVersionTable.PSVersion)"    
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
          
          # Run tests with CI-friendly output
          # -CI enables test results and proper exit codes for CI environments
          # Pester 5.x runs tests in parallel by default
          $config = New-PesterConfiguration
          $config.Run.Path = 'tests/All.Tests.ps1'
          $config.Run.PassThru = $true
          $config.Run.Exit = $true
          $config.Output.Verbosity = 'Normal'
          $config.Output.CIFormat = 'GithubActions'
          $config.Should.ErrorAction = 'Continue'
          
          $result = Invoke-Pester -Configuration $config
          
          Write-Host ""
          Write-Host "Test Summary:" -ForegroundColor Cyan
          Write-Host "  Total:   $($result.TotalCount)" -ForegroundColor White
          Write-Host "  Passed:  $($result.PassedCount)" -ForegroundColor Green
          Write-Host "  Failed:  $($result.FailedCount)" -ForegroundColor $(if ($result.FailedCount -gt 0) { "Red" } else { "Green" })
          Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
          
          if ($result.FailedCount -gt 0) {
            Write-Host ""
            Write-Host "Failed Tests:" -ForegroundColor Red
            
            # Save test failure details to file for PR comment
            $failureReport = "## ❌ Test Failures - ${{ matrix.os }} / PowerShell ${{ matrix.powershell_version }}`n`n"
            $failureReport += "**Total Tests:** $($result.TotalCount)  `n"
            $failureReport += "**Passed:** $($result.PassedCount)  `n"
            $failureReport += "**Failed:** $($result.FailedCount)  `n"
            $failureReport += "**Skipped:** $($result.SkippedCount)`n`n"
            $failureReport += "### Failed Tests:`n`n"
            
            foreach ($test in $result.Failed) {
              Write-Host "  - $($test.ExpandedPath)" -ForegroundColor Red
              Write-Host "    $($test.ErrorRecord.Exception.Message)" -ForegroundColor Gray
              $failureReport += "- **$($test.ExpandedPath)**`n  ``````n  $($test.ErrorRecord.Exception.Message)`n  ``````n"
            }
            
            $failureReport | Out-File -FilePath "test-failures-${{ matrix.os }}-${{ matrix.powershell_version }}.md" -Encoding utf8
            throw "Tests failed"
          }
      - if:  ${{ matrix.powershell_version == '5' }}
        name: Test - powershell
        id: test-powershell
        shell: powershell
        run: |  
            $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")
  
            Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
            
            # Run tests with CI-friendly output
            # -CI enables test results and proper exit codes for CI environments
            # Pester 5.x runs tests in parallel by default
            $config = New-PesterConfiguration
            $config.Run.Path = 'tests/All.Tests.ps1'
            $config.Run.PassThru = $true
            $config.Run.Exit = $true
            $config.Output.Verbosity = 'Normal'
            $config.Output.CIFormat = 'GithubActions'
            $config.Should.ErrorAction = 'Continue'
            
            $result = Invoke-Pester -Configuration $config
            
            Write-Host ""
            Write-Host "Test Summary:" -ForegroundColor Cyan
            Write-Host "  Total:   $($result.TotalCount)" -ForegroundColor White
            Write-Host "  Passed:  $($result.PassedCount)" -ForegroundColor Green
            Write-Host "  Failed:  $($result.FailedCount)" -ForegroundColor $(if ($result.FailedCount -gt 0) { "Red" } else { "Green" })
            Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
            
            if ($result.FailedCount -gt 0) {
              Write-Host ""
              Write-Host "Failed Tests:" -ForegroundColor Red
              
              # Save test failure details to file for PR comment
              $failureReport = "## ❌ Test Failures - ${{ matrix.os }} / PowerShell ${{ matrix.powershell_version }}`n`n"
              $failureReport += "**Total Tests:** $($result.TotalCount)  `n"
              $failureReport += "**Passed:** $($result.PassedCount)  `n"
              $failureReport += "**Failed:** $($result.FailedCount)  `n"
              $failureReport += "**Skipped:** $($result.SkippedCount)`n`n"
              $failureReport += "### Failed Tests:`n`n"
              
              foreach ($test in $result.Failed) {
                Write-Host "  - $($test.ExpandedPath)" -ForegroundColor Red
                Write-Host "    $($test.ErrorRecord.Exception.Message)" -ForegroundColor Gray
                $failureReport += "- **$($test.ExpandedPath)**`n  ``````n  $($test.ErrorRecord.Exception.Message)`n  ``````n"
              }
              
              $failureReport | Out-File -FilePath "test-failures-${{ matrix.os }}-${{ matrix.powershell_version }}.md" -Encoding utf8
              throw "Tests failed"
            }
      - if: ${{ matrix.powershell_version != '5' }}
        name: E2E Test - pwsh
        shell: pwsh
        env:
          E2ETESTS_URL: ${{ vars.E2ETESTS_URL }}
          E2ETESTS_CLIENTID: ${{ vars.E2ETESTS_CLIENTID }}
          E2ETESTS_CLIENTSECRET: ${{ secrets.E2ETESTS_CLIENTSECRET }}
        run: |  
          Write-Host "Using PowerShell $($PSVersionTable.PSVersion)"
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
          Invoke-Pester -output detailed -path e2e-tests
          if ($LASTEXITCODE -ne 0) {
            throw "Tests failed"
          }
      - if:  ${{ matrix.powershell_version == '5' }}
        name: E2E Test - powershell
        shell: powershell
        env:
          E2ETESTS_URL: ${{ vars.E2ETESTS_URL }}
          E2ETESTS_CLIENTID: ${{ vars.E2ETESTS_CLIENTID }}
          E2ETESTS_CLIENTSECRET: ${{ secrets.E2ETESTS_CLIENTSECRET }}
        run: |  
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -Force -Scope CurrentUser -SkipPublisherCheck Pester -MinimumVersion 5.0.0 -MaximumVersion 5.99.99
          Invoke-Pester -output detailed -path e2e-tests
          if ($LASTEXITCODE -ne 0) {
            throw "Tests failed"
          }      
      - if: ${{ matrix.publish && github.event_name == 'release' && github.event.action == 'published' }}
        name: Publish
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        shell: pwsh
        run: |
          Publish-Module -Path out/Rnwood.Dataverse.Data.PowerShell -NuGetApiKey $env:NUGET_KEY -Verbose
      
      # Upload test failure reports as artifacts
      - name: Upload test failure report
        if: failure() && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: test-failures-${{ matrix.os }}-${{ matrix.powershell_version }}
          path: test-failures-*.md
          if-no-files-found: ignore
      
      # Comment on PR with test failures
      - name: Comment on PR with test failures
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find failure report file
            const files = fs.readdirSync('.');
            const failureFile = files.find(f => f.startsWith('test-failures-'));
            
            if (!failureFile) {
              console.log('No test failure report found');
              return;
            }
            
            const failureContent = fs.readFileSync(failureFile, 'utf8');
            
            // Create comment body with @copilot mention
            const commentBody = `@copilot please investigate these test failures:

            ${failureContent}

            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Commit:** ${{ github.sha }}
            `;
            
            // Post comment to PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });