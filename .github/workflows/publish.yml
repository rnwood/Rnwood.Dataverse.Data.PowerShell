name: Build / publish

on:
  push:
  pull_request:
    types: [opened, reopened]
  release:
    types: [published]

jobs:
  main:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            powershell: false
            publish: false
            pwsh: true
            pwsh_version: "7.4.11"
          - os: windows-latest
            powershell: false
            publish: false
            pwsh: true
            pwsh_version: "7.4.11"
          - os: ubuntu-latest
            powershell: false
            publish: false
            pwsh: true
            pwsh_version: latest
          - os: windows-latest
            powershell: false
            publish: false
            pwsh: true
            pwsh_version: latest
          - os: ubuntu-latest
            powershell: true
            publish: false
            pwsh: false
            pwsh_version: ignored
          - os: windows-latest
            powershell: true
            publish: true
            pwsh: false
            pwsh_version: ignored

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ matrix.pwsh }}
        name: Install PowerShell ${{ matrix.pwsh_version }}
        uses: PSModule/install-powershell@v1
        with:
          Version: ${{ matrix.pwsh_version }}
      - name: Build
        shell: pwsh
        run: |       
          if ($env:GITHUB_REF -like "refs/tags/*") {
            $versionnumber = $env:GITHUB_REF -replace "refs/tags/", ""
            $manifestpath = "Rnwood.Dataverse.Data.PowerShell//Rnwood.Dataverse.Data.PowerShell.psd1"
            (get-content -raw -encoding UTF8 $manifestpath ) -replace "ModuleVersion ?=.*", "ModuleVersion = `"$versionnumber`"" | set-content -encoding UTF8 $manifestpath
          }

          dotnet build -c Release ./Rnwood.Dataverse.Data.PowerShell/Rnwood.Dataverse.Data.PowerShell.csproj
          if (test-path out/Rnwood.Dataverse.Data.PowerShell) {
            remove-item -force -recurse out/Rnwood.Dataverse.Data.PowerShell
          }
          copy-item -recurse Rnwood.Dataverse.Data.PowerShell\bin\Release\netstandard2.0 out/Rnwood.Dataverse.Data.PowerShell
      - if: ${{ matrix.pwsh }}
        name: Test - pwsh
        shell: pwsh
        run: |
          Write-Host "Using PowerShell $($PSVersionTable.PSVersion)"    
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -force Pester
          Invoke-Pester -output detailed -path tests
          if ($LASTEXITCODE -ne 0) {
            throw "Tests failed"
          }
      - if: ${{ matrix.powershell }}
        name: Test - powershell
        shell: powershell
        run: |  
            $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")
  
            Install-Module -force Pester
            Invoke-Pester -output detailed -path tests
            if ($LASTEXITCODE -ne 0) {
              throw "Tests failed"
            }
      - if: ${{ matrix.pwsh }}
        name: E2E Test - pwsh
        shell: pwsh
        env:
          E2ETESTS_URL: ${{ vars.E2ETESTS_URL }}
          E2ETESTS_CLIENTID: ${{ vars.E2ETESTS_CLIENTID }}
          E2ETESTS_CLIENTSECRET: ${{ secrets.E2ETESTS_CLIENTSECRET }}
        run: |  
          Write-Host "Using PowerShell $($PSVersionTable.PSVersion)"
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -force Pester
          Invoke-Pester -output detailed -path e2e-tests
          if ($LASTEXITCODE -ne 0) {
            throw "Tests failed"
          }
      - if: ${{matrix.powershell}} 
        name: E2E Test - powershell
        shell: powershell
        env:
          E2ETESTS_URL: ${{ vars.E2ETESTS_URL }}
          E2ETESTS_CLIENTID: ${{ vars.E2ETESTS_CLIENTID }}
          E2ETESTS_CLIENTSECRET: ${{ secrets.E2ETESTS_CLIENTSECRET }}
        run: |  
          $env:TESTMODULEPATH=(resolve-path "out/Rnwood.Dataverse.Data.PowerShell")

          Install-Module -force Pester
          Invoke-Pester -output detailed -path e2e-tests
          if ($LASTEXITCODE -ne 0) {
            throw "Tests failed"
          }      
      - if: ${{ matrix.publish && github.event_name == 'release' && github.event.action == 'published' }}
        name: Publish
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        shell: pwsh
        run: |
          Publish-Module -Path out/Rnwood.Dataverse.Data.PowerShell -NuGetApiKey $env:NUGET_KEY -Verbose